{"ast":null,"code":"import Constants from 'expo-constants';\nvar localhost;\nif (Constants.manifest.debuggerHost) {\n  localhost = Constants.manifest.debuggerHost.split(':').shift();\n}\nvar ENV = {\n  dev: {\n    API_URI: \"http://localhost:4000/api\"\n  },\n  prod: {\n    API_URI: 'https://<PUBLIC-API-URI>'\n  }\n};\nvar getEnvVars = function getEnvVars() {\n  var env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Constants.manifest.releaseChannel;\n  if (__DEV__) {\n    return ENV.dev;\n  } else if (env === 'prod') {\n    return ENV.prod;\n  }\n};\nexport default getEnvVars;","map":{"version":3,"names":["Constants","localhost","manifest","debuggerHost","split","shift","ENV","dev","API_URI","prod","getEnvVars","env","arguments","length","undefined","releaseChannel","__DEV__"],"sources":["C:/Users/HP/Downloads/E-Learn/auth-demo/reactnativeapp/config.js"],"sourcesContent":["// credit to Alex Martinez & Peter Piekarczyk for Environment configuration inspiration\r\n// https://medium.com/@peterpme/environment-variables-in-expo-using-release-channels-4934594c5307\r\n// https://alxmrtnz.com/thoughts/2019/03/12/environment-variables-and-workflow-in-expo.html\r\nimport Constants from 'expo-constants';\r\n\r\n// get the localhost ip address at runtime using the Expo manifest\r\n// this enables both simulator and physical device debugging with our local api\r\nlet localhost;\r\nif (Constants.manifest.debuggerHost) {\r\n  localhost = Constants.manifest.debuggerHost.split(':').shift();\r\n}\r\n\r\n// set environment variables\r\nconst ENV = {\r\n  dev: {\r\n    API_URI: `http://localhost:4000/api`\r\n  },\r\n  prod: {\r\n    // update the API_URI value with your publicly deployed API address\r\n    API_URI: 'https://<PUBLIC-API-URI>'\r\n  }\r\n};\r\n\r\nconst getEnvVars = (env = Constants.manifest.releaseChannel) => {\r\n  // __DEV__ is set to true when react-native is running locally in dev mode\r\n  // __DEV__ is set to false when our app is published\r\n  if (__DEV__) {\r\n    return ENV.dev;\r\n  } else if (env === 'prod') {\r\n    return ENV.prod;\r\n  }\r\n};\r\n\r\nexport default getEnvVars;\r\n"],"mappings":"AAGA,OAAOA,SAAS,MAAM,gBAAgB;AAItC,IAAIC,SAAS;AACb,IAAID,SAAS,CAACE,QAAQ,CAACC,YAAY,EAAE;EACnCF,SAAS,GAAGD,SAAS,CAACE,QAAQ,CAACC,YAAY,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,EAAE;AAChE;AAGA,IAAMC,GAAG,GAAG;EACVC,GAAG,EAAE;IACHC,OAAO;EACT,CAAC;EACDC,IAAI,EAAE;IAEJD,OAAO,EAAE;EACX;AACF,CAAC;AAED,IAAME,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAgD;EAAA,IAA5CC,GAAG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGZ,SAAS,CAACE,QAAQ,CAACa,cAAc;EAGzD,IAAIC,OAAO,EAAE;IACX,OAAOV,GAAG,CAACC,GAAG;EAChB,CAAC,MAAM,IAAII,GAAG,KAAK,MAAM,EAAE;IACzB,OAAOL,GAAG,CAACG,IAAI;EACjB;AACF,CAAC;AAED,eAAeC,UAAU"},"metadata":{},"sourceType":"module"}