{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { useInternalTheme } from \"../../core/theming\";\nimport { black, white } from \"../../styles/themes/v2/colors\";\nimport { forwardRef } from \"../../utils/forwardRef\";\nimport IconButton from \"../IconButton/IconButton\";\nimport { ToggleButtonGroupContext } from \"./ToggleButtonGroup\";\nimport { getToggleButtonColor } from \"./utils\";\nvar ToggleButton = forwardRef(function (_ref, ref) {\n  var icon = _ref.icon,\n    size = _ref.size,\n    themeOverrides = _ref.theme,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    style = _ref.style,\n    value = _ref.value,\n    status = _ref.status,\n    _onPress = _ref.onPress,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var borderRadius = theme.roundness;\n  return React.createElement(ToggleButtonGroupContext.Consumer, null, function (context) {\n    var checked = context && context.value === value || status === 'checked';\n    var backgroundColor = getToggleButtonColor({\n      theme: theme,\n      checked: checked\n    });\n    var borderColor = theme.isV3 ? theme.colors.outline : color(theme.dark ? white : black).alpha(0.29).rgb().string();\n    return React.createElement(IconButton, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: function onPress(e) {\n        if (_onPress) {\n          _onPress(e);\n        }\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled: disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor: backgroundColor,\n        borderRadius: borderRadius,\n        borderColor: borderColor\n      }, style],\n      ref: ref,\n      theme: theme\n    }, rest));\n  });\n});\nvar styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default ToggleButton;\nexport { ToggleButton };","map":{"version":3,"sources":["ToggleButton.tsx"],"names":["React","color","useInternalTheme","black","white","forwardRef","IconButton","ToggleButtonGroupContext","getToggleButtonColor","ToggleButton","icon","size","theme","themeOverrides","accessibilityLabel","disabled","style","value","status","onPress","rest","ref","borderRadius","roundness","context","checked","backgroundColor","borderColor","isV3","colors","outline","dark","alpha","rgb","string","e","onValueChange","selected","styles","content","StyleSheet","create","width","height","margin"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAA,UAAA;AAU9B,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,gBAAgB;AACzB,SAASC,KAAK,EAAEC,KAAK;AAErB,SAASC,UAAU;AAEnB,OAAOC,UAAU;AACjB,SAASC,wBAAwB;AACjC,SAASC,oBAAoB;AAiF7B,IAAMC,YAAY,GAAGJ,UAAU,CAC7B,UAAA,IAAA,EAaEgB,GAAG,EACA;EAbH,IACEX,IAAI,GAUE,IAAA,CAVNA,IAAI;IACJC,IAAI,GASE,IAAA,CATNA,IAAI;IACGE,cAAc,GAQf,IAAA,CARND,KAAK;IACLE,kBAAkB,GAOZ,IAAA,CAPNA,kBAAkB;IAClBC,QAAQ,GAMF,IAAA,CANNA,QAAQ;IACRC,KAAK,GAKC,IAAA,CALNA,KAAK;IACLC,KAAK,GAIC,IAAA,CAJNA,KAAK;IACLC,MAAM,GAGA,IAAA,CAHNA,MAAM;IACNC,QAAO,GAED,IAAA,CAFNA,OAAO;IACJC,IAAAA,GAAAA,wBAAAA,CACG,IAAA,EAAA,SAAA;EAGR,IAAMR,KAAK,GAAGV,gBAAgB,CAACW,cAAc,CAAC;EAC9C,IAAMS,YAAY,GAAGV,KAAK,CAACW,SAAS;EAEpC,OACE,KAAA,CAAA,aAAA,CAAC,wBAAwB,CAAC,QAAQ,EAAA,IAAA,EAE9BC,UAAAA,OAAiE,EAC9D;IACH,IAAMC,OAAuB,GAC1BD,OAAO,IAAIA,OAAO,CAACP,KAAK,KAAKA,KAAK,IAAKC,MAAM,KAAK,SAAS;IAE9D,IAAMQ,eAAe,GAAGlB,oBAAoB,CAAC;MAAEI,KAAK,EAALA,KAAK;MAAEa,OAAAA,EAAAA;IAAQ,CAAC,CAAC;IAChE,IAAME,WAAW,GAAGf,KAAK,CAACgB,IAAI,GAC1BhB,KAAK,CAACiB,MAAM,CAACC,OAAO,GACpB7B,KAAK,CAACW,KAAK,CAACmB,IAAI,GAAG3B,KAAK,GAAGD,KAAK,CAAC,CAC9B6B,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,EAAE,CACLC,MAAM,EAAE;IAEf,OACE,KAAA,CAAA,aAAA,CAAC,UAAU,EAAA,QAAA,CAAA;MACT,UAAU,EAAE,KAAM;MAClB,IAAI,EAAExB,IAAK;MACX,OAAO,EAAGyB,SAAAA,QAAAA,CAAkC,EAAK;QAC/C,IAAIhB,QAAO,EAAE;UACXA,QAAO,CAACgB,CAAC,CAAC;QACZ;QAEA,IAAIX,OAAO,EAAE;UACXA,OAAO,CAACY,aAAa,CAAC,CAACX,OAAO,GAAGR,KAAK,GAAG,IAAI,CAAC;QAChD;MACF,CAAE;MACF,IAAI,EAAEN,IAAK;MACX,kBAAkB,EAAEG,kBAAmB;MACvC,kBAAkB,EAAE;QAAEC,QAAQ,EAARA,QAAQ;QAAEsB,QAAQ,EAAEZ;MAAQ,CAAE;MACpD,QAAQ,EAAEV,QAAS;MACnB,KAAK,EAAE,CACLuB,MAAM,CAACC,OAAO,EACd;QACEb,eAAe,EAAfA,eAAe;QACfJ,YAAY,EAAZA,YAAY;QACZK,WAAAA,EAAAA;MACF,CAAC,EACDX,KAAK,CACL;MACF,GAAG,EAAEK,GAAI;MACT,KAAK,EAAET;IAAM,CAAA,EACTQ,IAAI,CAAA,CACR;EAEN,CAAC,CACiC;AAExC,CAAC,CACF;AAED,IAAMkB,MAAM,GAAGE,UAAU,CAACC,MAAM,CAAC;EAC/BF,OAAO,EAAE;IACPG,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;AAEF,eAAenC,YAAY;AAG3B,SAASA,YAAY","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport color from 'color';\nimport { useInternalTheme } from '../../core/theming';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport { forwardRef } from '../../utils/forwardRef';\nimport IconButton from '../IconButton/IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { getToggleButtonColor } from './utils';\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = forwardRef((_ref, ref) => {\n  let {\n    icon,\n    size,\n    theme: themeOverrides,\n    accessibilityLabel,\n    disabled,\n    style,\n    value,\n    status,\n    onPress,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const borderRadius = theme.roundness;\n  return /*#__PURE__*/React.createElement(ToggleButtonGroupContext.Consumer, null, context => {\n    const checked = context && context.value === value || status === 'checked';\n    const backgroundColor = getToggleButtonColor({\n      theme,\n      checked\n    });\n    const borderColor = theme.isV3 ? theme.colors.outline : color(theme.dark ? white : black).alpha(0.29).rgb().string();\n    return /*#__PURE__*/React.createElement(IconButton, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: e => {\n        if (onPress) {\n          onPress(e);\n        }\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor,\n        borderRadius,\n        borderColor\n      }, style],\n      ref: ref,\n      theme: theme\n    }, rest));\n  });\n});\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default ToggleButton;\n\n// @component-docs ignore-next-line\nexport { ToggleButton };\n//# sourceMappingURL=ToggleButton.js.map"]},"metadata":{},"sourceType":"module"}