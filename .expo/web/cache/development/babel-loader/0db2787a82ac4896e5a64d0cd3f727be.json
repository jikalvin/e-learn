{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ToggleButton from \"./ToggleButton\";\nimport ToggleButtonGroup from \"./ToggleButtonGroup\";\nvar ToggleButtonRow = function ToggleButtonRow(_ref) {\n  var value = _ref.value,\n    onValueChange = _ref.onValueChange,\n    children = _ref.children,\n    style = _ref.style;\n  var count = React.Children.count(children);\n  return React.createElement(ToggleButtonGroup, {\n    value: value,\n    onValueChange: onValueChange\n  }, React.createElement(View, {\n    style: [styles.row, style]\n  }, React.Children.map(children, function (child, i) {\n    if (child && child.type === ToggleButton) {\n      return React.cloneElement(child, {\n        style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, child.props.style]\n      });\n    }\n    return child;\n  })));\n};\nToggleButtonRow.displayName = 'ToggleButton.Row';\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth\n  },\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }\n});\nexport default ToggleButtonRow;\nexport { ToggleButtonRow };","map":{"version":3,"sources":["ToggleButtonRow.tsx"],"names":["React","ToggleButton","ToggleButtonGroup","ToggleButtonRow","value","onValueChange","children","style","count","Children","styles","row","map","child","i","type","cloneElement","button","first","last","middle","props","displayName","StyleSheet","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAA,UAAA;AAAA,OAAA,IAAA;AAG9B,OAAOC,YAAY;AACnB,OAAOC,iBAAiB;AA+CxB,IAAMC,eAAe,GAAG,SAAlBA,eAAe,CAAG,IAAA,EAAsD;EAArD,IAAEC,KAAK,GAAyC,IAAA,CAA9CA,KAAK;IAAEC,aAAa,GAA0B,IAAA,CAAvCA,aAAa;IAAEC,QAAQ,GAAgB,IAAA,CAAxBA,QAAQ;IAAEC,KAAAA,GAAc,IAAA,CAAdA,KAAAA;EACzD,IAAMC,KAAK,GAAGR,KAAK,CAACS,QAAQ,CAACD,KAAK,CAACF,QAAQ,CAAC;EAE5C,OACE,KAAA,CAAA,aAAA,CAAC,iBAAiB,EAAA;IAAC,KAAK,EAAEF,KAAM;IAAC,aAAa,EAAEC;EAAc,CAAA,EAC5D,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA;IAAC,KAAK,EAAE,CAACK,MAAM,CAACC,GAAG,EAAEJ,KAAK;EAAE,CAAA,EAC9BP,KAAK,CAACS,QAAQ,CAACG,GAAG,CAACN,QAAQ,EAAE,UAACO,KAAK,EAAEC,CAAC,EAAK;IAE1C,IAAID,KAAK,IAAIA,KAAK,CAACE,IAAI,KAAKd,YAAY,EAAE;MAExC,OAAOD,KAAK,CAACgB,YAAY,CAACH,KAAK,EAAE;QAC/BN,KAAK,EAAE,CACLG,MAAM,CAACO,MAAM,EACbH,CAAC,KAAK,CAAC,GACHJ,MAAM,CAACQ,KAAK,GACZJ,CAAC,KAAKN,KAAK,GAAG,CAAC,GACfE,MAAM,CAACS,IAAI,GACXT,MAAM,CAACU,MAAM,EAEjBP,KAAK,CAACQ,KAAK,CAACd,KAAK;MAErB,CAAC,CAAC;IACJ;IAEA,OAAOM,KAAK;EACd,CAAC,CAAC,CACG,CACW;AAExB,CAAC;AAEDV,eAAe,CAACmB,WAAW,GAAG,kBAAkB;AAEhD,IAAMZ,MAAM,GAAGa,UAAU,CAACC,MAAM,CAAC;EAC/Bb,GAAG,EAAE;IACHc,aAAa,EAAE;EACjB,CAAC;EACDR,MAAM,EAAE;IACNS,WAAW,EAAEH,UAAU,CAACI;EAC1B,CAAC;EAEDT,KAAK,EAAE;IACLU,oBAAoB,EAAE,CAAC;IACvBC,uBAAuB,EAAE;EAC3B,CAAC;EAEDT,MAAM,EAAE;IACNU,YAAY,EAAE,CAAC;IACfC,eAAe,EAAE;EACnB,CAAC;EAEDZ,IAAI,EAAE;IACJY,eAAe,EAAE,CAAC;IAClBC,mBAAmB,EAAE,CAAC;IACtBC,sBAAsB,EAAE;EAC1B;AACF,CAAC,CAAC;AAEF,eAAe9B,eAAe;AAG9B,SAASA,eAAe","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport ToggleButton from './ToggleButton';\nimport ToggleButtonGroup from './ToggleButtonGroup';\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nconst ToggleButtonRow = _ref => {\n  let {\n    value,\n    onValueChange,\n    children,\n    style\n  } = _ref;\n  const count = React.Children.count(children);\n  return /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    value: value,\n    onValueChange: onValueChange\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.row, style]\n  }, React.Children.map(children, (child, i) => {\n    // @ts-expect-error: TypeScript complains about child.type but it doesn't matter\n    if (child && child.type === ToggleButton) {\n      // @ts-expect-error: We're sure that child is a React Element\n      return /*#__PURE__*/React.cloneElement(child, {\n        style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle,\n        // @ts-expect-error: We're sure that child is a React Element\n        child.props.style]\n      });\n    }\n    return child;\n  })));\n};\nToggleButtonRow.displayName = 'ToggleButton.Row';\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth\n  },\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }\n});\nexport default ToggleButtonRow;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonRow };\n//# sourceMappingURL=ToggleButtonRow.js.map"]},"metadata":{},"sourceType":"module"}