{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"value\", \"status\", \"testID\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { getAndroidSelectionControlColor } from \"../Checkbox/utils\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nvar BORDER_WIDTH = 2;\nvar RadioButtonAndroid = function RadioButtonAndroid(_ref) {\n  var disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    themeOverrides = _ref.theme,\n    value = _ref.value,\n    status = _ref.status,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var _React$useRef = React.useRef(new Animated.Value(BORDER_WIDTH)),\n    borderAnim = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new Animated.Value(1)),\n    radioAnim = _React$useRef2.current;\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    var _getAndroidSelectionC = getAndroidSelectionControlColor({\n        theme: theme,\n        disabled: disabled,\n        checked: checked,\n        customColor: rest.color,\n        customUncheckedColor: rest.uncheckedColor\n      }),\n      rippleColor = _getAndroidSelectionC.rippleColor,\n      selectionControlColor = _getAndroidSelectionC.selectionControlColor;\n    return React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function (event) {\n        handlePress({\n          onPress: onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value: value,\n          event: event\n        });\n      },\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID,\n      theme: theme\n    }), React.createElement(Animated.View, {\n      style: [styles.radio, {\n        borderColor: selectionControlColor,\n        borderWidth: borderAnim\n      }]\n    }, checked ? React.createElement(View, {\n      style: [StyleSheet.absoluteFill, styles.radioContainer]\n    }, React.createElement(Animated.View, {\n      style: [styles.dot, {\n        backgroundColor: selectionControlColor,\n        transform: [{\n          scale: radioAnim\n        }]\n      }]\n    })) : null));\n  });\n};\nRadioButtonAndroid.displayName = 'RadioButton.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default RadioButtonAndroid;\nexport { RadioButtonAndroid };","map":{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["React","useInternalTheme","getAndroidSelectionControlColor","TouchableRipple","RadioButtonContext","handlePress","isChecked","BORDER_WIDTH","RadioButtonAndroid","disabled","onPress","theme","themeOverrides","value","status","testID","rest","current","borderAnim","useRef","Animated","Value","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","context","checked","contextValue","rippleColor","selectionControlColor","customColor","color","customUncheckedColor","uncheckedColor","undefined","event","onValueChange","styles","container","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport { getAndroidSelectionControlColor } from '../Checkbox/utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = _ref => {\n  let {\n    disabled,\n    onPress,\n    theme: themeOverrides,\n    value,\n    status,\n    testID,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    current: borderAnim\n  } = React.useRef(new Animated.Value(BORDER_WIDTH));\n  const {\n    current: radioAnim\n  } = React.useRef(new Animated.Value(1));\n  const isFirstRendering = React.useRef(true);\n  const {\n    scale\n  } = theme.animation;\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n  return /*#__PURE__*/React.createElement(RadioButtonContext.Consumer, null, context => {\n    const checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status,\n      value\n    }) === 'checked';\n    const {\n      rippleColor,\n      selectionControlColor\n    } = getAndroidSelectionControlColor({\n      theme,\n      disabled,\n      checked,\n      customColor: rest.color,\n      customUncheckedColor: rest.uncheckedColor\n    });\n    return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : event => {\n        handlePress({\n          onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value,\n          event\n        });\n      },\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled,\n        checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID,\n      theme: theme\n    }), /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.radio, {\n        borderColor: selectionControlColor,\n        borderWidth: borderAnim\n      }]\n    }, checked ? /*#__PURE__*/React.createElement(View, {\n      style: [StyleSheet.absoluteFill, styles.radioContainer]\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.dot, {\n        backgroundColor: selectionControlColor,\n        transform: [{\n          scale: radioAnim\n        }]\n      }]\n    })) : null));\n  });\n};\nRadioButtonAndroid.displayName = 'RadioButton.Android';\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default RadioButtonAndroid;\n\n// @component-docs ignore-next-line\nexport { RadioButtonAndroid };\n//# sourceMappingURL=RadioButtonAndroid.js.map"]},"metadata":{},"sourceType":"module"}