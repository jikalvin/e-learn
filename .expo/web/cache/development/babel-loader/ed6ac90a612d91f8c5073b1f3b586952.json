{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nexport var ListAccordionGroupContext = React.createContext(null);\nvar ListAccordionGroup = function ListAccordionGroup(_ref) {\n  var expandedIdProp = _ref.expandedId,\n    onAccordionPress = _ref.onAccordionPress,\n    children = _ref.children;\n  var _React$useState = React.useState(undefined),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    expandedId = _React$useState2[0],\n    setExpandedId = _React$useState2[1];\n  var onAccordionPressDefault = function onAccordionPressDefault(newExpandedId) {\n    setExpandedId(function (currentExpandedId) {\n      return currentExpandedId === newExpandedId ? undefined : newExpandedId;\n    });\n  };\n  return React.createElement(ListAccordionGroupContext.Provider, {\n    value: {\n      expandedId: expandedIdProp || expandedId,\n      onAccordionPress: onAccordionPress || onAccordionPressDefault\n    }\n  }, children);\n};\nListAccordionGroup.displayName = 'List.AccordionGroup';\nexport default ListAccordionGroup;","map":{"version":3,"sources":["ListAccordionGroup.tsx"],"names":["React","ListAccordionGroupContext","createContext","ListAccordionGroup","expandedId","expandedIdProp","onAccordionPress","children","setExpandedId","useState","undefined","onAccordionPressDefault","newExpandedId","currentExpandedId","displayName"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAsB9B,OAAO,IAAMC,yBAAyB,GACpCD,KAAK,CAACE,aAAa,CAAgC,IAAI,CAAC;AAuC1D,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAG,IAAA,EAId;EAJe,IACdE,cAAc,GAGpB,IAAA,CAHND,UAAU;IACVE,gBAAgB,GAEV,IAAA,CAFNA,gBAAgB;IAChBC,QAAAA,GACM,IAAA,CADNA,QAAAA;EAEA,IAAA,eAAA,GAAoCP,KAAK,CAACS,QAAQ,CAEhDC,SAAS,CAAC;IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA;IAFLN,UAAU,GAAA,gBAAA;IAAEI,aAAa,GAAA,gBAAA;EAIhC,IAAMG,uBAAuB,GAAIC,SAA3BD,uBAAuB,CAAIC,aAA8B,EAAK;IAClEJ,aAAa,CAAEK,UAAAA,iBAAiB;MAAA,OAC9BA,iBAAiB,KAAKD,aAAa,GAAGF,SAAS,GAAGE,aAAa;IAAA,EAChE;EACH,CAAC;EAED,OACE,KAAA,CAAA,aAAA,CAAC,yBAAyB,CAAC,QAAQ,EAAA;IACjC,KAAK,EAAE;MACLR,UAAU,EAAEC,cAAc,IAAID,UAAU;MACxCE,gBAAgB,EAAEA,gBAAgB,IAAIK;IACxC;EAAE,CAAA,EAEDJ,QAAQ,CAC0B;AAEzC,CAAC;AAEDJ,kBAAkB,CAACW,WAAW,GAAG,qBAAqB;AAEtD,eAAeX,kBAAkB","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nexport const ListAccordionGroupContext = /*#__PURE__*/React.createContext(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = _ref => {\n  let {\n    expandedId: expandedIdProp,\n    onAccordionPress,\n    children\n  } = _ref;\n  const [expandedId, setExpandedId] = React.useState(undefined);\n  const onAccordionPressDefault = newExpandedId => {\n    setExpandedId(currentExpandedId => currentExpandedId === newExpandedId ? undefined : newExpandedId);\n  };\n  return /*#__PURE__*/React.createElement(ListAccordionGroupContext.Provider, {\n    value: {\n      expandedId: expandedIdProp || expandedId,\n      // component can be controlled or uncontrolled\n      onAccordionPress: onAccordionPress || onAccordionPressDefault\n    }\n  }, children);\n};\nListAccordionGroup.displayName = 'List.AccordionGroup';\nexport default ListAccordionGroup;\n//# sourceMappingURL=ListAccordionGroup.js.map"]},"metadata":{},"sourceType":"module"}