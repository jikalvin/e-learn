{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\", \"disabled\", \"onValueChange\", \"color\", \"theme\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeSwitch from \"react-native-web/dist/exports/Switch\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { getSwitchColor } from \"./utils\";\nvar version = NativeModules.PlatformConstants ? NativeModules.PlatformConstants.reactNativeVersion : undefined;\nvar Switch = function Switch(_ref) {\n  var value = _ref.value,\n    disabled = _ref.disabled,\n    onValueChange = _ref.onValueChange,\n    color = _ref.color,\n    themeOverrides = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var _getSwitchColor = getSwitchColor({\n      theme: theme,\n      disabled: disabled,\n      value: value,\n      color: color\n    }),\n    checkedColor = _getSwitchColor.checkedColor,\n    onTintColor = _getSwitchColor.onTintColor,\n    thumbTintColor = _getSwitchColor.thumbTintColor;\n  var props = version && version.major === 0 && version.minor <= 56 ? {\n    onTintColor: onTintColor,\n    thumbTintColor: thumbTintColor\n  } : Platform.OS === 'web' ? {\n    activeTrackColor: onTintColor,\n    thumbColor: thumbTintColor,\n    activeThumbColor: checkedColor\n  } : {\n    thumbColor: thumbTintColor,\n    trackColor: {\n      true: onTintColor,\n      false: onTintColor\n    }\n  };\n  return React.createElement(NativeSwitch, _extends({\n    value: value,\n    disabled: disabled,\n    onValueChange: disabled ? undefined : onValueChange\n  }, props, rest));\n};\nexport default Switch;","map":{"version":3,"sources":["Switch.tsx"],"names":["React","useInternalTheme","getSwitchColor","version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","value","disabled","onValueChange","color","theme","themeOverrides","rest","checkedColor","onTintColor","thumbTintColor","props","major","minor","Platform","OS","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAA,aAAA;AAAA,OAAA,QAAA;AAAA,OAAA,YAAA;AAS9B,SAASC,gBAAgB;AAEzB,SAASC,cAAc;AAEvB,IAAMC,OAAO,GAAGC,aAAa,CAACC,iBAAiB,GAC3CD,aAAa,CAACC,iBAAiB,CAACC,kBAAkB,GAClDC,SAAS;AAgEb,IAAMC,MAAM,GAAG,SAATA,MAAM,CAAG,IAAA,EAOF;EAPG,IACdC,KAAK,GAMC,IAAA,CANNA,KAAK;IACLC,QAAQ,GAKF,IAAA,CALNA,QAAQ;IACRC,aAAa,GAIP,IAAA,CAJNA,aAAa;IACbC,KAAK,GAGC,IAAA,CAHNA,KAAK;IACEE,cAAc,GAEf,IAAA,CAFND,KAAK;IACFE,IAAAA,GAAAA,wBAAAA,CACG,IAAA,EAAA,SAAA;EACN,IAAMF,KAAK,GAAGZ,gBAAgB,CAACa,cAAc,CAAC;EAC9C,IAAA,eAAA,GAAsDZ,cAAc,CAAC;MACnEW,KAAK,EAALA,KAAK;MACLH,QAAQ,EAARA,QAAQ;MACRD,KAAK,EAALA,KAAK;MACLG,KAAAA,EAAAA;IACF,CAAC,CAAC;IALMI,YAAY,GAAA,eAAA,CAAZA,YAAY;IAAEC,WAAW,GAAA,eAAA,CAAXA,WAAW;IAAEC,cAAAA,GAAAA,eAAAA,CAAAA,cAAAA;EAOnC,IAAMC,KAAK,GACThB,OAAO,IAAIA,OAAO,CAACiB,KAAK,KAAK,CAAC,IAAIjB,OAAO,CAACkB,KAAK,IAAI,EAAE,GACjD;IACEJ,WAAW,EAAXA,WAAW;IACXC,cAAAA,EAAAA;EACF,CAAC,GACDI,QAAQ,CAACC,EAAE,KAAK,KAAK,GACrB;IACEC,gBAAgB,EAAEP,WAAW;IAC7BQ,UAAU,EAAEP,cAAc;IAC1BQ,gBAAgB,EAAEV;EACpB,CAAC,GACD;IACES,UAAU,EAAEP,cAAc;IAC1BS,UAAU,EAAE;MACVC,IAAI,EAAEX,WAAW;MACjBY,KAAK,EAAEZ;IACT;EACF,CAAC;EAEP,OACE,KAAA,CAAA,aAAA,CAAC,YAAY,EAAA,QAAA,CAAA;IACX,KAAK,EAAER,KAAM;IACb,QAAQ,EAAEC,QAAS;IACnB,aAAa,EAAEA,QAAQ,GAAGH,SAAS,GAAGI;EAAc,CAAA,EAChDQ,KAAK,EACLJ,IAAI,CAAA,CACR;AAEN,CAAC;AAED,eAAeP,MAAM","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { NativeModules, Platform, Switch as NativeSwitch } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport { getSwitchColor } from './utils';\nconst version = NativeModules.PlatformConstants ? NativeModules.PlatformConstants.reactNativeVersion : undefined;\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Switch = _ref => {\n  let {\n    value,\n    disabled,\n    onValueChange,\n    color,\n    theme: themeOverrides,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    checkedColor,\n    onTintColor,\n    thumbTintColor\n  } = getSwitchColor({\n    theme,\n    disabled,\n    value,\n    color\n  });\n  const props = version && version.major === 0 && version.minor <= 56 ? {\n    onTintColor,\n    thumbTintColor\n  } : Platform.OS === 'web' ? {\n    activeTrackColor: onTintColor,\n    thumbColor: thumbTintColor,\n    activeThumbColor: checkedColor\n  } : {\n    thumbColor: thumbTintColor,\n    trackColor: {\n      true: onTintColor,\n      false: onTintColor\n    }\n  };\n  return /*#__PURE__*/React.createElement(NativeSwitch, _extends({\n    value: value,\n    disabled: disabled,\n    onValueChange: disabled ? undefined : onValueChange\n  }, props, rest));\n};\nexport default Switch;\n//# sourceMappingURL=Switch.js.map"]},"metadata":{},"sourceType":"module"}