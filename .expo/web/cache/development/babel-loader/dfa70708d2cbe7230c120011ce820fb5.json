{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"elevation\", \"onLongPress\", \"delayLongPress\", \"onPress\", \"mode\", \"children\", \"style\", \"contentStyle\", \"theme\", \"testID\", \"accessible\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport Surface from \"../Surface\";\nimport CardActions from \"./CardActions\";\nimport CardContent from \"./CardContent\";\nimport CardCover from \"./CardCover\";\nimport CardTitle from \"./CardTitle\";\nimport { getCardColors } from \"./utils\";\nvar Card = function Card(_ref) {\n  var _ref$elevation = _ref.elevation,\n    cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n    onLongPress = _ref.onLongPress,\n    delayLongPress = _ref.delayLongPress,\n    onPress = _ref.onPress,\n    _ref$mode = _ref.mode,\n    cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,\n    children = _ref.children,\n    style = _ref.style,\n    contentStyle = _ref.contentStyle,\n    themeOverrides = _ref.theme,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'card' : _ref$testID,\n    accessible = _ref.accessible,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var isMode = React.useCallback(function (modeToCompare) {\n    return cardMode === modeToCompare;\n  }, [cardMode]);\n  var _React$useRef = React.useRef(new Animated.Value(cardElevation)),\n    elevation = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new Animated.Value(cardElevation)),\n    elevationDarkAdaptive = _React$useRef2.current;\n  var animation = theme.animation,\n    dark = theme.dark,\n    mode = theme.mode,\n    roundness = theme.roundness,\n    isV3 = theme.isV3;\n  var prevDarkRef = React.useRef(dark);\n  React.useEffect(function () {\n    prevDarkRef.current = dark;\n  });\n  var prevDark = prevDarkRef.current;\n  var isAdaptiveMode = mode === 'adaptive';\n  var animationDuration = 150 * animation.scale;\n  React.useEffect(function () {\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);\n  var runElevationAnimation = function runElevationAnimation(pressType) {\n    var isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    }\n  };\n  var handlePressIn = function handlePressIn() {\n    runElevationAnimation('in');\n  };\n  var handlePressOut = function handlePressOut() {\n    runElevationAnimation('out');\n  };\n  var total = React.Children.count(children);\n  var siblings = React.Children.map(children, function (child) {\n    return React.isValidElement(child) && child.type ? child.type.displayName : null;\n  });\n  var computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n  var _getCardColors = getCardColors({\n      theme: theme,\n      mode: cardMode\n    }),\n    backgroundColor = _getCardColors.backgroundColor,\n    themedBorderColor = _getCardColors.borderColor;\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? (isV3 ? 3 : 1) * roundness : _ref2$borderRadius,\n    _ref2$borderColor = _ref2.borderColor,\n    borderColor = _ref2$borderColor === void 0 ? themedBorderColor : _ref2$borderColor;\n  return React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: borderRadius\n    }, isV3 && !isMode('elevated') && {\n      backgroundColor: backgroundColor\n    }, !isV3 && isMode('outlined') ? styles.resetElevation : {\n      elevation: computedElevation\n    }, style],\n    theme: theme\n  }, isV3 && {\n    elevation: isMode('elevated') ? computedElevation : 0\n  }, {\n    testID: testID + \"-container\"\n  }, rest), isMode('outlined') && React.createElement(View, {\n    pointerEvents: \"none\",\n    testID: testID + \"-outline\",\n    style: [{\n      borderRadius: borderRadius,\n      borderColor: borderColor\n    }, styles.outline]\n  }), React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    delayLongPress: delayLongPress,\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, React.createElement(View, {\n    style: [styles.innerContainer, contentStyle]\n  }, React.Children.map(children, function (child, index) {\n    return React.isValidElement(child) ? React.cloneElement(child, {\n      index: index,\n      total: total,\n      siblings: siblings\n    }) : child;\n  }))));\n};\nCard.Content = CardContent;\nCard.Actions = CardActions;\nCard.Cover = CardCover;\nCard.Title = CardTitle;\nvar styles = StyleSheet.create({\n  innerContainer: {\n    flexShrink: 1\n  },\n  outline: {\n    borderWidth: 1,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 2\n  },\n  resetElevation: {\n    elevation: 0\n  }\n});\nexport default Card;","map":{"version":3,"sources":["Card.tsx"],"names":["React","useInternalTheme","Surface","CardActions","CardContent","CardCover","CardTitle","getCardColors","Card","elevation","cardElevation","onLongPress","delayLongPress","onPress","mode","cardMode","children","style","contentStyle","theme","themeOverrides","testID","accessible","rest","isMode","useCallback","modeToCompare","current","useRef","Animated","Value","elevationDarkAdaptive","animation","dark","roundness","isV3","prevDarkRef","useEffect","prevDark","isAdaptiveMode","animationDuration","scale","setValue","runElevationAnimation","pressType","isPressTypeIn","timing","toValue","duration","useNativeDriver","start","handlePressIn","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","computedElevation","backgroundColor","borderColor","themedBorderColor","borderRadius","StyleSheet","flatten","styles","resetElevation","outline","undefined","innerContainer","index","cloneElement","Content","Actions","Cover","Title","create","flexShrink","borderWidth","position","width","height","zIndex"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { Animated, StyleSheet, TouchableWithoutFeedback, View } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport Surface from '../Surface';\nimport CardActions from './CardActions';\nimport CardContent from './CardContent';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle from './CardTitle';\nimport { getCardColors } from './utils';\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/card-1.png\" />\n *     <figcaption>Elevated card</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/card-2.png\" />\n *     <figcaption>Outlined card</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/card-3.png\" />\n *     <figcaption>Contained card</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Text } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Text variant=\"titleLarge\">Card title</Text>\n *       <Text variant=\"bodyMedium\">Card content</Text>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = _ref => {\n  let {\n    elevation: cardElevation = 1,\n    onLongPress,\n    delayLongPress,\n    onPress,\n    mode: cardMode = 'elevated',\n    children,\n    style,\n    contentStyle,\n    theme: themeOverrides,\n    testID = 'card',\n    accessible,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const isMode = React.useCallback(modeToCompare => {\n    return cardMode === modeToCompare;\n  }, [cardMode]);\n\n  // Default animated value\n  const {\n    current: elevation\n  } = React.useRef(new Animated.Value(cardElevation));\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const {\n    current: elevationDarkAdaptive\n  } = React.useRef(new Animated.Value(cardElevation));\n  const {\n    animation,\n    dark,\n    mode,\n    roundness,\n    isV3\n  } = theme;\n  const prevDarkRef = React.useRef(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);\n  const runElevationAnimation = pressType => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    }\n  };\n  const handlePressIn = () => {\n    runElevationAnimation('in');\n  };\n  const handlePressOut = () => {\n    runElevationAnimation('out');\n  };\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) && child.type ? child.type.displayName : null);\n  const computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n  const {\n    backgroundColor,\n    borderColor: themedBorderColor\n  } = getCardColors({\n    theme,\n    mode: cardMode\n  });\n  const {\n    borderRadius = (isV3 ? 3 : 1) * roundness,\n    borderColor = themedBorderColor\n  } = StyleSheet.flatten(style) || {};\n  return /*#__PURE__*/React.createElement(Surface, _extends({\n    style: [{\n      borderRadius\n    }, isV3 && !isMode('elevated') && {\n      backgroundColor\n    }, !isV3 && isMode('outlined') ? styles.resetElevation : {\n      elevation: computedElevation\n    }, style],\n    theme: theme\n  }, isV3 && {\n    elevation: isMode('elevated') ? computedElevation : 0\n  }, {\n    testID: `${testID}-container`\n  }, rest), isMode('outlined') && /*#__PURE__*/React.createElement(View, {\n    pointerEvents: \"none\",\n    testID: `${testID}-outline`,\n    style: [{\n      borderRadius,\n      borderColor\n    }, styles.outline]\n  }), /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    delayLongPress: delayLongPress,\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.innerContainer, contentStyle]\n  }, React.Children.map(children, (child, index) => /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, {\n    index,\n    total,\n    siblings\n  }) : child))));\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexShrink: 1\n  },\n  outline: {\n    borderWidth: 1,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 2\n  },\n  resetElevation: {\n    elevation: 0\n  }\n});\nexport default Card;\n//# sourceMappingURL=Card.js.map"]},"metadata":{},"sourceType":"module"}