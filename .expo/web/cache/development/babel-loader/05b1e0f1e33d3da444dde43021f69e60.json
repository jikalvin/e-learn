{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"status\", \"theme\", \"disabled\", \"onPress\", \"testID\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { getAndroidSelectionControlColor } from \"./utils\";\nvar ANIMATION_DURATION = 100;\nvar CheckboxAndroid = function CheckboxAndroid(_ref) {\n  var status = _ref.status,\n    themeOverrides = _ref.theme,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var _React$useRef = React.useRef(new Animated.Value(1)),\n    scaleAnim = _React$useRef.current;\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n    var checked = status === 'checked';\n    Animated.sequence([Animated.timing(scaleAnim, {\n      toValue: 0.85,\n      duration: checked ? ANIMATION_DURATION * scale : 0,\n      useNativeDriver: false\n    }), Animated.timing(scaleAnim, {\n      toValue: 1,\n      duration: checked ? ANIMATION_DURATION * scale : ANIMATION_DURATION * scale * 1.75,\n      useNativeDriver: false\n    })]).start();\n  }, [status, scaleAnim, scale]);\n  var checked = status === 'checked';\n  var indeterminate = status === 'indeterminate';\n  var _getAndroidSelectionC = getAndroidSelectionControlColor({\n      theme: theme,\n      disabled: disabled,\n      checked: checked,\n      customColor: rest.color,\n      customUncheckedColor: rest.uncheckedColor\n    }),\n    rippleColor = _getAndroidSelectionC.rippleColor,\n    selectionControlColor = _getAndroidSelectionC.selectionControlColor;\n  var borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0]\n  });\n  var icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';\n  return React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID,\n    theme: theme\n  }), React.createElement(Animated.View, {\n    style: {\n      transform: [{\n        scale: scaleAnim\n      }]\n    }\n  }, React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: selectionControlColor,\n    direction: \"ltr\"\n  }), React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.fillContainer]\n  }, React.createElement(Animated.View, {\n    style: [styles.fill, {\n      borderColor: selectionControlColor\n    }, {\n      borderWidth: borderWidth\n    }]\n  }))));\n};\nCheckboxAndroid.displayName = 'Checkbox.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    height: 14,\n    width: 14\n  }\n});\nexport default CheckboxAndroid;\nexport { CheckboxAndroid };","map":{"version":3,"sources":["CheckboxAndroid.tsx"],"names":["React","useInternalTheme","MaterialCommunityIcon","TouchableRipple","getAndroidSelectionControlColor","ANIMATION_DURATION","CheckboxAndroid","status","theme","themeOverrides","disabled","onPress","testID","rest","current","scaleAnim","useRef","Animated","Value","isFirstRendering","animation","scale","useEffect","checked","sequence","timing","toValue","duration","useNativeDriver","start","indeterminate","rippleColor","selectionControlColor","customColor","color","customUncheckedColor","uncheckedColor","borderWidth","interpolate","inputRange","outputRange","icon","styles","container","transform","StyleSheet","absoluteFill","fillContainer","fill","borderColor","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { getAndroidSelectionControlColor } from './utils';\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxAndroid = _ref => {\n  let {\n    status,\n    theme: themeOverrides,\n    disabled,\n    onPress,\n    testID,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    current: scaleAnim\n  } = React.useRef(new Animated.Value(1));\n  const isFirstRendering = React.useRef(true);\n  const {\n    animation: {\n      scale\n    }\n  } = theme;\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n    const checked = status === 'checked';\n    Animated.sequence([Animated.timing(scaleAnim, {\n      toValue: 0.85,\n      duration: checked ? ANIMATION_DURATION * scale : 0,\n      useNativeDriver: false\n    }), Animated.timing(scaleAnim, {\n      toValue: 1,\n      duration: checked ? ANIMATION_DURATION * scale : ANIMATION_DURATION * scale * 1.75,\n      useNativeDriver: false\n    })]).start();\n  }, [status, scaleAnim, scale]);\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const {\n    rippleColor,\n    selectionControlColor\n  } = getAndroidSelectionControlColor({\n    theme,\n    disabled,\n    checked,\n    customColor: rest.color,\n    customUncheckedColor: rest.uncheckedColor\n  });\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0]\n  });\n  const icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';\n  return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled,\n      checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID,\n    theme: theme\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    style: {\n      transform: [{\n        scale: scaleAnim\n      }]\n    }\n  }, /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: selectionControlColor,\n    direction: \"ltr\"\n  }), /*#__PURE__*/React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.fillContainer]\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.fill, {\n      borderColor: selectionControlColor\n    }, {\n      borderWidth\n    }]\n  }))));\n};\nCheckboxAndroid.displayName = 'Checkbox.Android';\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    height: 14,\n    width: 14\n  }\n});\nexport default CheckboxAndroid;\n\n// @component-docs ignore-next-line\nexport { CheckboxAndroid };\n//# sourceMappingURL=CheckboxAndroid.js.map"]},"metadata":{},"sourceType":"module"}