{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { Navigation } from \"./navigation\";\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { StatusBar } from 'expo-status-bar';\nimport { ApolloClient, ApolloProvider, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from 'apollo-link-context';\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport getEnvVars from \"./config\";\nvar _getEnvVars = getEnvVars(),\n  API_URI = _getEnvVars.API_URI;\nvar uri = API_URI;\nvar cache = new InMemoryCache();\nvar httpLink = createHttpLink({\n  uri: uri\n});\nvar authLink = setContext(function () {\n  var _ref2 = _asyncToGenerator(function* (_, _ref) {\n    var headers = _ref.headers;\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: (yield AsyncStorage.getItem('token')) || ''\n      })\n    };\n  });\n  return function (_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nvar client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: cache\n});\nimport Login from \"./screens/Login\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  return _jsx(ApolloProvider, {\n    client: client,\n    children: _jsxs(SafeAreaProvider, {\n      children: [_jsx(Login, {}), _jsx(StatusBar, {})]\n    })\n  });\n}","map":{"version":3,"names":["Navigation","React","SafeAreaProvider","StatusBar","ApolloClient","ApolloProvider","createHttpLink","InMemoryCache","setContext","AsyncStorage","getEnvVars","_getEnvVars","API_URI","uri","cache","httpLink","authLink","_ref2","_asyncToGenerator","_","_ref","headers","_objectSpread","authorization","getItem","_x","_x2","apply","arguments","client","link","concat","Login","jsx","_jsx","jsxs","_jsxs","App","children"],"sources":["C:/Users/HP/Downloads/E-Learn/auth-demo/reactnativeapp/App.js"],"sourcesContent":["// import { ApolloProvider } from '@apollo/client';\r\nimport { Navigation } from './navigation';\r\nimport React from 'react';\r\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\r\nimport { StatusBar } from 'expo-status-bar';\r\n// import { client } from './graphql/client';\r\nimport {\r\n  ApolloClient,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n  InMemoryCache\r\n} from '@apollo/client';\r\nimport { setContext } from 'apollo-link-context';\r\n// import SecureStore for retrieving the token value\r\n// import * as SecureStore from 'expo-secure-store';\r\n// import {AsyncStorage} from '@react-native-async-storage/async-storage';\r\nimport { AsyncStorage } from 'react-native';\r\n\r\n// import environment configuration\r\nimport getEnvVars from './config';\r\nconst { API_URI } = getEnvVars();\r\n\r\n// configure our API URI & cache\r\nconst uri = API_URI;\r\nconst cache = new InMemoryCache();\r\nconst httpLink = createHttpLink({ uri });\r\n\r\n// return the headers to the context\r\nconst authLink = setContext(async (_, { headers }) => {\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: (await AsyncStorage.getItem('token')) || ''\r\n    }\r\n  };\r\n});\r\n\r\n// configure Apollo Client\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache\r\n});\r\n\r\nimport Login from './screens/Login';\r\n\r\nexport default function App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <SafeAreaProvider>\r\n        <Login />\r\n        <StatusBar />\r\n      </SafeAreaProvider>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n"],"mappings":";;;;AACA,SAASA,UAAU;AACnB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,QAAQ,gCAAgC;AACjE,SAASC,SAAS,QAAQ,iBAAiB;AAE3C,SACEC,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,aAAa,QACR,gBAAgB;AACvB,SAASC,UAAU,QAAQ,qBAAqB;AAAC,SAIxCC,YAAY;AAGrB,OAAOC,UAAU;AACjB,IAAAC,WAAA,GAAoBD,UAAU,EAAE;EAAxBE,OAAO,GAAAD,WAAA,CAAPC,OAAO;AAGf,IAAMC,GAAG,GAAGD,OAAO;AACnB,IAAME,KAAK,GAAG,IAAIP,aAAa,EAAE;AACjC,IAAMQ,QAAQ,GAAGT,cAAc,CAAC;EAAEO,GAAG,EAAHA;AAAI,CAAC,CAAC;AAGxC,IAAMG,QAAQ,GAAGR,UAAU;EAAA,IAAAS,KAAA,GAAAC,iBAAA,CAAC,WAAOC,CAAC,EAAAC,IAAA,EAAkB;IAAA,IAAdC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAC7C,OAAO;MACLA,OAAO,EAAAC,aAAA,CAAAA,aAAA,KACFD,OAAO;QACVE,aAAa,EAAE,OAAOd,YAAY,CAACe,OAAO,CAAC,OAAO,CAAC,KAAK;MAAE;IAE9D,CAAC;EACH,CAAC;EAAA,iBAAAC,EAAA,EAAAC,GAAA;IAAA,OAAAT,KAAA,CAAAU,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAGF,IAAMC,MAAM,GAAG,IAAIzB,YAAY,CAAC;EAC9B0B,IAAI,EAAEd,QAAQ,CAACe,MAAM,CAAChB,QAAQ,CAAC;EAC/BD,KAAK,EAALA;AACF,CAAC,CAAC;AAEF,OAAOkB,KAAK;AAAwB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEpC,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,OACEH,IAAA,CAAC7B,cAAc;IAACwB,MAAM,EAAEA,MAAO;IAAAS,QAAA,EAC7BF,KAAA,CAAClC,gBAAgB;MAAAoC,QAAA,GACfJ,IAAA,CAACF,KAAK,KAAG,EACTE,IAAA,CAAC/B,SAAS,KAAG;IAAA;EACI,EACJ;AAErB"},"metadata":{},"sourceType":"module"}