{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"size\", \"style\", \"theme\"],\n  _excluded2 = [\"backgroundColor\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/themes/v2/colors\";\nimport getContrastingColor from \"../../utils/getContrastingColor\";\nimport Icon from \"../Icon\";\nvar defaultSize = 64;\nvar Avatar = function Avatar(_ref) {\n  var _rest$color;\n  var _theme$colors;\n  var icon = _ref.icon,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? defaultSize : _ref$size,\n    style = _ref.style,\n    themeOverrides = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$backgroundColor = _ref2.backgroundColor,\n    backgroundColor = _ref2$backgroundColor === void 0 ? (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.primary : _ref2$backgroundColor,\n    restStyle = _objectWithoutProperties(_ref2, _excluded2);\n  var textColor = (_rest$color = rest.color) != null ? _rest$color : getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  return React.createElement(View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: backgroundColor\n    }, styles.container, restStyle]\n  }, rest), React.createElement(Icon, {\n    source: icon,\n    color: textColor,\n    size: size * 0.6\n  }));\n};\nAvatar.displayName = 'Avatar.Icon';\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default Avatar;","map":{"version":3,"sources":["AvatarIcon.tsx"],"names":["React","useInternalTheme","white","getContrastingColor","Icon","defaultSize","Avatar","icon","size","style","theme","themeOverrides","rest","backgroundColor","colors","primary","restStyle","StyleSheet","flatten","textColor","color","width","height","borderRadius","styles","container","displayName","create","justifyContent","alignItems"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAA,UAAA;AAAA,OAAA,IAAA;AAG9B,SAASC,gBAAgB;AACzB,SAASC,KAAK;AAEd,OAAOC,mBAAmB;AAC1B,OAAOC,IAAI;AAEX,IAAMC,WAAW,GAAG,EAAE;AAyCtB,IAAMC,MAAM,GAAG,SAATA,MAAM,CAAG,IAAA,EAMF;EAAA,IAAA,WAAA;EAAA,IAAA,aAAA;EANG,IACdC,IAAI,GAKE,IAAA,CALNA,IAAI;IAAA,SAAA,GAKE,IAAA,CAJNC,IAAI;IAAJA,IAAI,GAAA,SAAA,cAAGH,WAAW,GAAA,SAAA;IAClBI,KAAK,GAGC,IAAA,CAHNA,KAAK;IACEE,cAAc,GAEf,IAAA,CAFND,KAAK;IACFE,IAAAA,GAAAA,wBAAAA,CACG,IAAA,EAAA,SAAA;EACN,IAAMF,KAAK,GAAGT,gBAAgB,CAACU,cAAc,CAAC;EAC9C,IAAA,KAAA,GACEM,UAAU,CAACC,OAAO,CAACT,KAAK,CAAC,IAAI,CAAC,CAAC;IAAA,qBAAA,GAAA,KAAA,CADzBI,eAAe;IAAfA,eAAe,GAAA,qBAAA,cAAA,CAAA,aAAA,GAAGH,KAAK,CAACI,MAAM,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZJ,aAAAA,CAAcK,OAAO,GAAA,qBAAA;IAAKC,SAAAA,GAAAA,wBAAAA,CAAAA,KAAAA,EAAAA,UAAAA;EAEpD,IAAMG,SAAS,IAAA,WAAA,GACbP,IAAI,CAACQ,KAAK,YAAA,WAAA,GACVjB,mBAAmB,CAACU,eAAe,EAAEX,KAAK,EAAE,oBAAoB,CAAC;EAEnE,OACE,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA,QAAA,CAAA;IACH,KAAK,EAAE,CACL;MACEmB,KAAK,EAAEb,IAAI;MACXc,MAAM,EAAEd,IAAI;MACZe,YAAY,EAAEf,IAAI,GAAG,CAAC;MACtBK,eAAAA,EAAAA;IACF,CAAC,EACDW,MAAM,CAACC,SAAS,EAChBT,SAAS;EACT,CAAA,EACEJ,IAAI,CAAA,EAER,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA;IAAC,MAAM,EAAEL,IAAK;IAAC,KAAK,EAAEY,SAAU;IAAC,IAAI,EAAEX,IAAI,GAAG;EAAI,CAAA,CAAG,CACrD;AAEX,CAAC;AAEDF,MAAM,CAACoB,WAAW,GAAG,aAAa;AAElC,IAAMF,MAAM,GAAGP,UAAU,CAACU,MAAM,CAAC;EAC/BF,SAAS,EAAE;IACTG,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEF,eAAevB,MAAM","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport Icon from '../Icon';\nconst defaultSize = 64;\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Icon size={24} icon=\"folder\" />\n * );\n * ```\n */\nconst Avatar = _ref => {\n  var _theme$colors;\n  let {\n    icon,\n    size = defaultSize,\n    style,\n    theme: themeOverrides,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    backgroundColor = (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.primary,\n    ...restStyle\n  } = StyleSheet.flatten(style) || {};\n  const textColor = rest.color ?? getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  return /*#__PURE__*/React.createElement(View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor\n    }, styles.container, restStyle]\n  }, rest), /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    color: textColor,\n    size: size * 0.6\n  }));\n};\nAvatar.displayName = 'Avatar.Icon';\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default Avatar;\n//# sourceMappingURL=AvatarIcon.js.map"]},"metadata":{},"sourceType":"module"}