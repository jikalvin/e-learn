{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport RadioButton from \"./RadioButton\";\nimport RadioButtonAndroid from \"./RadioButtonAndroid\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport RadioButtonIOS from \"./RadioButtonIOS\";\nimport { handlePress, isChecked } from \"./utils\";\nvar RadioButtonItem = function RadioButtonItem(_ref) {\n  var value = _ref.value,\n    label = _ref.label,\n    style = _ref.style,\n    labelStyle = _ref.labelStyle,\n    _onPress = _ref.onPress,\n    disabled = _ref.disabled,\n    color = _ref.color,\n    uncheckedColor = _ref.uncheckedColor,\n    status = _ref.status,\n    themeOverrides = _ref.theme,\n    _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n    testID = _ref.testID,\n    mode = _ref.mode,\n    _ref$position = _ref.position,\n    position = _ref$position === void 0 ? 'trailing' : _ref$position,\n    _ref$labelVariant = _ref.labelVariant,\n    labelVariant = _ref$labelVariant === void 0 ? 'bodyLarge' : _ref$labelVariant;\n  var theme = useInternalTheme(themeOverrides);\n  var radioButtonProps = {\n    value: value,\n    disabled: disabled,\n    status: status,\n    color: color,\n    uncheckedColor: uncheckedColor\n  };\n  var isLeading = position === 'leading';\n  var radioButton;\n  if (mode === 'android') {\n    radioButton = React.createElement(RadioButtonAndroid, radioButtonProps);\n  } else if (mode === 'ios') {\n    radioButton = React.createElement(RadioButtonIOS, radioButtonProps);\n  } else {\n    radioButton = React.createElement(RadioButton, radioButtonProps);\n  }\n  var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  var textAlign = isLeading ? 'right' : 'left';\n  var computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign: textAlign\n  };\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    return React.createElement(TouchableRipple, {\n      onPress: function onPress(event) {\n        return handlePress({\n          onPress: _onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value: value,\n          event: event\n        });\n      },\n      accessibilityLabel: accessibilityLabel,\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        checked: checked,\n        disabled: disabled\n      },\n      testID: testID,\n      disabled: disabled,\n      theme: theme\n    }, React.createElement(View, {\n      style: [styles.container, style],\n      pointerEvents: \"none\"\n    }, isLeading && radioButton, React.createElement(Text, {\n      variant: labelVariant,\n      style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n    }, label), !isLeading && radioButton));\n  });\n};\nRadioButtonItem.displayName = 'RadioButton.Item';\nexport default RadioButtonItem;\nexport { RadioButtonItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["RadioButtonItem.tsx"],"names":["React","useInternalTheme","TouchableRipple","Text","RadioButton","RadioButtonAndroid","RadioButtonContext","RadioButtonIOS","handlePress","isChecked","RadioButtonItem","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","themeOverrides","accessibilityLabel","testID","mode","position","labelVariant","radioButtonProps","isLeading","radioButton","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","context","checked","contextValue","event","onValueChange","styles","container","font","displayName","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAA,UAAA;AAAA,OAAA,IAAA;AAU9B,SAASC,gBAAgB;AAEzB,OAAOC,eAAe;AACtB,OAAOC,IAAI;AACX,OAAOC,WAAW;AAClB,OAAOC,kBAAkB;AACzB,SAASC,kBAAkB;AAC3B,OAAOC,cAAc;AACrB,SAASC,WAAW,EAAEC,SAAS;AA4G/B,IAAMC,eAAe,GAAG,SAAlBA,eAAe,CAAG,IAAA,EAgBX;EAhBY,IACvBC,KAAK,GAeC,IAAA,CAfNA,KAAK;IACLC,KAAK,GAcC,IAAA,CAdNA,KAAK;IACLC,KAAK,GAaC,IAAA,CAbNA,KAAK;IACLC,UAAU,GAYJ,IAAA,CAZNA,UAAU;IACVC,QAAO,GAWD,IAAA,CAXNA,OAAO;IACPC,QAAQ,GAUF,IAAA,CAVNA,QAAQ;IACRC,KAAK,GASC,IAAA,CATNA,KAAK;IACLC,cAAc,GAQR,IAAA,CARNA,cAAc;IACdC,MAAM,GAOA,IAAA,CAPNA,MAAM;IACCE,cAAc,GAMf,IAAA,CANND,KAAK;IAAA,qBAAA,GAMC,IAAA,CALNE,kBAAkB;IAAlBA,kBAAkB,GAAA,qBAAA,cAAGV,KAAK,GAAA,qBAAA;IAC1BW,MAAM,GAIA,IAAA,CAJNA,MAAM;IACNC,IAAI,GAGE,IAAA,CAHNA,IAAI;IAAA,aAAA,GAGE,IAAA,CAFNC,QAAQ;IAARA,QAAQ,GAAA,aAAA,cAAG,UAAU,GAAA,aAAA;IAAA,iBAAA,GAEf,IAAA,CADNC,YAAY;IAAZA,YAAY,GAAA,iBAAA,cAAG,WAAA,GAAA,iBAAA;EAEf,IAAMN,KAAK,GAAGnB,gBAAgB,CAACoB,cAAc,CAAC;EAC9C,IAAMM,gBAAgB,GAAG;IAAEhB,KAAK,EAALA,KAAK;IAAEK,QAAQ,EAARA,QAAQ;IAAEG,MAAM,EAANA,MAAM;IAAEF,KAAK,EAALA,KAAK;IAAEC,cAAAA,EAAAA;EAAe,CAAC;EAC3E,IAAMU,SAAS,GAAGH,QAAQ,KAAK,SAAS;EACxC,IAAII,WAAgB;EAEpB,IAAIL,IAAI,KAAK,SAAS,EAAE;IACtBK,WAAW,GAAG,KAAA,CAAA,aAAA,CAAC,kBAAkB,EAAKF,gBAAgB,CAAI;EAC5D,CAAC,MAAM,IAAIH,IAAI,KAAK,KAAK,EAAE;IACzBK,WAAW,GAAG,KAAA,CAAA,aAAA,CAAC,cAAc,EAAKF,gBAAgB,CAAI;EACxD,CAAC,MAAM;IACLE,WAAW,GAAG,KAAA,CAAA,aAAA,CAAC,WAAW,EAAKF,gBAAgB,CAAI;EACrD;EAEA,IAAMG,SAAS,GAAGV,KAAK,CAACW,IAAI,GAAGX,KAAK,CAACY,MAAM,CAACC,SAAS,GAAGb,KAAK,CAACY,MAAM,CAACE,IAAI;EACzE,IAAMC,iBAAiB,GAAGf,KAAK,CAACW,IAAI,GAChCX,KAAK,CAACY,MAAM,CAACI,iBAAiB,GAC9BhB,KAAK,CAACY,MAAM,CAAChB,QAAQ;EACzB,IAAMqB,SAAS,GAAGT,SAAS,GAAG,OAAO,GAAG,MAAM;EAE9C,IAAMU,aAAa,GAAG;IACpBrB,KAAK,EAAED,QAAQ,GAAGmB,iBAAiB,GAAGL,SAAS;IAC/CO,SAAAA,EAAAA;EACF,CAAc;EAEd,OACE,KAAA,CAAA,aAAA,CAAC,kBAAkB,CAAC,QAAQ,EAAA,IAAA,EACxBE,UAAAA,OAAgC,EAAK;IACrC,IAAMC,OAAO,GACX/B,SAAS,CAAC;MACRgC,YAAY,EAAEF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAE5B,KAAK;MAC5BQ,MAAM,EAANA,MAAM;MACNR,KAAAA,EAAAA;IACF,CAAC,CAAC,KAAK,SAAS;IAClB,OACE,KAAA,CAAA,aAAA,CAAC,eAAe,EAAA;MACd,OAAO,EAAG+B,SAAAA,QAAAA,KAAK;QAAA,OACblC,WAAW,CAAC;UACVO,OAAO,EAAEA,QAAO;UAChB4B,aAAa,EAAEJ,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEI,aAAa;UACrChC,KAAK,EAALA,KAAK;UACL+B,KAAAA,EAAAA;QACF,CAAC,CACF;MAAA;MACD,kBAAkB,EAAEpB,kBAAmB;MACvC,iBAAiB,EAAC,OAAO;MACzB,kBAAkB,EAAE;QAClBkB,OAAO,EAAPA,OAAO;QACPxB,QAAAA,EAAAA;MACF,CAAE;MACF,MAAM,EAAEO,MAAO;MACf,QAAQ,EAAEP,QAAS;MACnB,KAAK,EAAEI;IAAM,CAAA,EAEb,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA;MAAC,KAAK,EAAE,CAACwB,MAAM,CAACC,SAAS,EAAEhC,KAAK,CAAE;MAAC,aAAa,EAAC;IAAM,CAAA,EACzDe,SAAS,IAAIC,WAAW,EACzB,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA;MACH,OAAO,EAAEH,YAAa;MACtB,KAAK,EAAE,CACLkB,MAAM,CAAChC,KAAK,EACZ,CAACQ,KAAK,CAACW,IAAI,IAAIa,MAAM,CAACE,IAAI,EAC1BR,aAAa,EACbxB,UAAU;IACV,CAAA,EAEDF,KAAK,CACD,EACN,CAACgB,SAAS,IAAIC,WAAW,CACrB,CACS;EAEtB,CAAC,CAC2B;AAElC,CAAC;AAEDnB,eAAe,CAACqC,WAAW,GAAG,kBAAkB;AAEhD,eAAerC,eAAe;AAG9B,SAASA,eAAe;AAExB,IAAMkC,MAAM,GAAGI,UAAU,CAACC,MAAM,CAAC;EAC/BJ,SAAS,EAAE;IACTK,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,eAAe;IAC/BC,eAAe,EAAE,CAAC;IAClBC,iBAAiB,EAAE;EACrB,CAAC;EACD1C,KAAK,EAAE;IACL2C,UAAU,EAAE,CAAC;IACbC,QAAQ,EAAE;EACZ,CAAC;EACDV,IAAI,EAAE;IACJW,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport RadioButton from './RadioButton';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport RadioButtonIOS from './RadioButtonIOS';\nimport { handlePress, isChecked } from './utils';\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = _ref => {\n  let {\n    value,\n    label,\n    style,\n    labelStyle,\n    onPress,\n    disabled,\n    color,\n    uncheckedColor,\n    status,\n    theme: themeOverrides,\n    accessibilityLabel = label,\n    testID,\n    mode,\n    position = 'trailing',\n    labelVariant = 'bodyLarge'\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const radioButtonProps = {\n    value,\n    disabled,\n    status,\n    color,\n    uncheckedColor\n  };\n  const isLeading = position === 'leading';\n  let radioButton;\n  if (mode === 'android') {\n    radioButton = /*#__PURE__*/React.createElement(RadioButtonAndroid, radioButtonProps);\n  } else if (mode === 'ios') {\n    radioButton = /*#__PURE__*/React.createElement(RadioButtonIOS, radioButtonProps);\n  } else {\n    radioButton = /*#__PURE__*/React.createElement(RadioButton, radioButtonProps);\n  }\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign\n  };\n  return /*#__PURE__*/React.createElement(RadioButtonContext.Consumer, null, context => {\n    const checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status,\n      value\n    }) === 'checked';\n    return /*#__PURE__*/React.createElement(TouchableRipple, {\n      onPress: event => handlePress({\n        onPress: onPress,\n        onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n        value,\n        event\n      }),\n      accessibilityLabel: accessibilityLabel,\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        checked,\n        disabled\n      },\n      testID: testID,\n      disabled: disabled,\n      theme: theme\n    }, /*#__PURE__*/React.createElement(View, {\n      style: [styles.container, style],\n      pointerEvents: \"none\"\n    }, isLeading && radioButton, /*#__PURE__*/React.createElement(Text, {\n      variant: labelVariant,\n      style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n    }, label), !isLeading && radioButton));\n  });\n};\nRadioButtonItem.displayName = 'RadioButton.Item';\nexport default RadioButtonItem;\n\n// @component-docs ignore-next-line\nexport { RadioButtonItem };\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});\n//# sourceMappingURL=RadioButtonItem.js.map"]},"metadata":{},"sourceType":"module"}