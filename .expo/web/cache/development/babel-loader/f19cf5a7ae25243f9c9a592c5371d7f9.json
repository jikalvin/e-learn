{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"status\", \"value\", \"testID\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { getSelectionControlIOSColor } from \"../Checkbox/utils\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nvar RadioButtonIOS = function RadioButtonIOS(_ref) {\n  var disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    themeOverrides = _ref.theme,\n    status = _ref.status,\n    value = _ref.value,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    var _getSelectionControlI = getSelectionControlIOSColor({\n        theme: theme,\n        disabled: disabled,\n        customColor: rest.color\n      }),\n      checkedColor = _getSelectionControlI.checkedColor,\n      rippleColor = _getSelectionControlI.rippleColor;\n    var opacity = checked ? 1 : 0;\n    return React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function (event) {\n        handlePress({\n          onPress: onPress,\n          value: value,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          event: event\n        });\n      },\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID,\n      theme: theme\n    }), React.createElement(View, {\n      style: {\n        opacity: opacity\n      }\n    }, React.createElement(MaterialCommunityIcon, {\n      allowFontScaling: false,\n      name: \"check\",\n      size: 24,\n      color: checkedColor,\n      direction: \"ltr\"\n    })));\n  });\n};\nRadioButtonIOS.displayName = 'RadioButton.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default RadioButtonIOS;\nexport { RadioButtonIOS };","map":{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["React","useInternalTheme","getSelectionControlIOSColor","MaterialCommunityIcon","TouchableRipple","RadioButtonContext","handlePress","isChecked","RadioButtonIOS","disabled","onPress","theme","themeOverrides","status","value","testID","rest","context","checked","contextValue","checkedColor","rippleColor","customColor","color","opacity","undefined","event","onValueChange","styles","container","displayName","StyleSheet","create","borderRadius","padding"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport { getSelectionControlIOSColor } from '../Checkbox/utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = _ref => {\n  let {\n    disabled,\n    onPress,\n    theme: themeOverrides,\n    status,\n    value,\n    testID,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  return /*#__PURE__*/React.createElement(RadioButtonContext.Consumer, null, context => {\n    const checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status,\n      value\n    }) === 'checked';\n    const {\n      checkedColor,\n      rippleColor\n    } = getSelectionControlIOSColor({\n      theme,\n      disabled,\n      customColor: rest.color\n    });\n    const opacity = checked ? 1 : 0;\n    return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : event => {\n        handlePress({\n          onPress,\n          value,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          event\n        });\n      },\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled,\n        checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID,\n      theme: theme\n    }), /*#__PURE__*/React.createElement(View, {\n      style: {\n        opacity\n      }\n    }, /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n      allowFontScaling: false,\n      name: \"check\",\n      size: 24,\n      color: checkedColor,\n      direction: \"ltr\"\n    })));\n  });\n};\nRadioButtonIOS.displayName = 'RadioButton.IOS';\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default RadioButtonIOS;\n\n// @component-docs ignore-next-line\nexport { RadioButtonIOS };\n//# sourceMappingURL=RadioButtonIOS.js.map"]},"metadata":{},"sourceType":"module"}