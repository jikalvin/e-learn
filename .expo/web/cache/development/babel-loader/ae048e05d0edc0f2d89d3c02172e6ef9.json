{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"status\", \"disabled\", \"onPress\", \"theme\", \"testID\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { getSelectionControlIOSColor } from \"./utils\";\nvar CheckboxIOS = function CheckboxIOS(_ref) {\n  var status = _ref.status,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    themeOverrides = _ref.theme,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var checked = status === 'checked';\n  var indeterminate = status === 'indeterminate';\n  var _getSelectionControlI = getSelectionControlIOSColor({\n      theme: theme,\n      disabled: disabled,\n      customColor: rest.color\n    }),\n    checkedColor = _getSelectionControlI.checkedColor,\n    rippleColor = _getSelectionControlI.rippleColor;\n  var icon = indeterminate ? 'minus' : 'check';\n  var opacity = indeterminate || checked ? 1 : 0;\n  return React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID,\n    theme: theme\n  }), React.createElement(View, {\n    style: {\n      opacity: opacity\n    }\n  }, React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: checkedColor,\n    direction: \"ltr\"\n  })));\n};\nCheckboxIOS.displayName = 'Checkbox.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default CheckboxIOS;\nexport { CheckboxIOS };","map":{"version":3,"sources":["CheckboxIOS.tsx"],"names":["React","useInternalTheme","MaterialCommunityIcon","TouchableRipple","getSelectionControlIOSColor","CheckboxIOS","status","disabled","onPress","theme","themeOverrides","testID","rest","checked","indeterminate","checkedColor","rippleColor","customColor","color","icon","opacity","styles","container","displayName","StyleSheet","create","borderRadius","padding"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAA,UAAA;AAAA,OAAA,IAAA;AAG9B,SAASC,gBAAgB;AAEzB,OAAOC,qBAAqB;AAC5B,OAAOC,eAAe;AACtB,SAASC,2BAA2B;AA6CpC,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAG,IAAA,EAOP;EAPQ,IACnBC,MAAM,GAMA,IAAA,CANNA,MAAM;IACNC,QAAQ,GAKF,IAAA,CALNA,QAAQ;IACRC,OAAO,GAID,IAAA,CAJNA,OAAO;IACAE,cAAc,GAGf,IAAA,CAHND,KAAK;IACLE,MAAM,GAEA,IAAA,CAFNA,MAAM;IACHC,IAAAA,GAAAA,wBAAAA,CACG,IAAA,EAAA,SAAA;EACN,IAAMH,KAAK,GAAGR,gBAAgB,CAACS,cAAc,CAAC;EAC9C,IAAMG,OAAO,GAAGP,MAAM,KAAK,SAAS;EACpC,IAAMQ,aAAa,GAAGR,MAAM,KAAK,eAAe;EAEhD,IAAA,qBAAA,GAAsCF,2BAA2B,CAAC;MAChEK,KAAK,EAALA,KAAK;MACLF,QAAQ,EAARA,QAAQ;MACRU,WAAW,EAAEL,IAAI,CAACM;IACpB,CAAC,CAAC;IAJMH,YAAY,GAAA,qBAAA,CAAZA,YAAY;IAAEC,WAAAA,GAAAA,qBAAAA,CAAAA,WAAAA;EAMtB,IAAMG,IAAI,GAAGL,aAAa,GAAG,OAAO,GAAG,OAAO;EAC9C,IAAMM,OAAO,GAAGN,aAAa,IAAID,OAAO,GAAG,CAAC,GAAG,CAAC;EAEhD,OACE,KAAA,CAAA,aAAA,CAAC,eAAe,EAAA,QAAA,CAAA,CAAA,CAAA,EACVD,IAAI,EAAA;IACR,UAAU,EAAA,IAAA;IACV,WAAW,EAAEI,WAAY;IACzB,OAAO,EAAER,OAAQ;IACjB,QAAQ,EAAED,QAAS;IACnB,iBAAiB,EAAC,UAAU;IAC5B,kBAAkB,EAAE;MAAEA,QAAQ,EAARA,QAAQ;MAAEM,OAAAA,EAAAA;IAAQ,CAAE;IAC1C,uBAAuB,EAAC,QAAQ;IAChC,KAAK,EAAEQ,MAAM,CAACC,SAAU;IACxB,MAAM,EAAEX,MAAO;IACf,KAAK,EAAEF;EAAM,CAAA,CAAA,EAEb,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA;IAAC,KAAK,EAAE;MAAEW,OAAAA,EAAAA;IAAQ;EAAE,CAAA,EACvB,KAAA,CAAA,aAAA,CAAC,qBAAqB,EAAA;IACpB,gBAAgB,EAAE,KAAM;IACxB,IAAI,EAAED,IAAK;IACX,IAAI,EAAE,EAAG;IACT,KAAK,EAAEJ,YAAa;IACpB,SAAS,EAAC;EAAK,CAAA,CACf,CACG,CACS;AAEtB,CAAC;AAEDV,WAAW,CAACkB,WAAW,GAAG,cAAc;AAExC,IAAMF,MAAM,GAAGG,UAAU,CAACC,MAAM,CAAC;EAC/BH,SAAS,EAAE;IACTI,YAAY,EAAE,EAAE;IAChBC,OAAO,EAAE;EACX;AACF,CAAC,CAAC;AAEF,eAAetB,WAAW;AAG1B,SAASA,WAAW","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { getSelectionControlIOSColor } from './utils';\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = _ref => {\n  let {\n    status,\n    disabled,\n    onPress,\n    theme: themeOverrides,\n    testID,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const {\n    checkedColor,\n    rippleColor\n  } = getSelectionControlIOSColor({\n    theme,\n    disabled,\n    customColor: rest.color\n  });\n  const icon = indeterminate ? 'minus' : 'check';\n  const opacity = indeterminate || checked ? 1 : 0;\n  return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled,\n      checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID,\n    theme: theme\n  }), /*#__PURE__*/React.createElement(View, {\n    style: {\n      opacity\n    }\n  }, /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: checkedColor,\n    direction: \"ltr\"\n  })));\n};\nCheckboxIOS.displayName = 'Checkbox.IOS';\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default CheckboxIOS;\n\n// @component-docs ignore-next-line\nexport { CheckboxIOS };\n//# sourceMappingURL=CheckboxIOS.js.map"]},"metadata":{},"sourceType":"module"}