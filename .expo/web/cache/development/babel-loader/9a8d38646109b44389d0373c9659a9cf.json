{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Buffer } from 'buffer';\nimport { getHost } from \"../graphql/getHost\";\nimport jwt_decode from 'jwt-decode';\nvar tokenList = ['graphqlHost', 'accessToken', 'refreshToken'];\nexport var setTokens = function setTokens(_ref) {\n  var accessToken = _ref.accessToken,\n    refreshToken = _ref.refreshToken;\n  console.info(\"got new tokens!\");\n  AsyncStorage.multiSet([['graphqlHost', getHost()], ['accessToken', accessToken], ['refreshToken', refreshToken]]).catch(function (error) {\n    console.error(\"Error setting tokens: \" + error.message);\n  });\n};\nexport var getTokens = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    var kvArray = yield AsyncStorage.multiGet(tokenList);\n    var graphqlHost = kvArray[0][1];\n    return graphqlHost === getHost() ? {\n      accessToken: kvArray[1][1],\n      refreshToken: kvArray[2][1]\n    } : {\n      accessToken: null,\n      refreshToken: null\n    };\n  });\n  return function getTokens() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var hasValidTokens = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    var _yield$getTokens = yield getTokens(),\n      accessToken = _yield$getTokens.accessToken,\n      refreshToken = _yield$getTokens.refreshToken;\n    return isTokenValid(accessToken) || isTokenValid(refreshToken);\n  });\n  return function hasValidTokens() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var clearTokens = function clearTokens() {\n  AsyncStorage.multiRemove(tokenList);\n};\nexport var tokenExpiryTime = function tokenExpiryTime(token) {\n  var _jwt_decode;\n  return new Date((_jwt_decode = jwt_decode(token)) == null ? void 0 : _jwt_decode.iat);\n};\nvar isTokenValid = function isTokenValid(token) {\n  if (token != null && token.length) {\n    var payloadBase64 = token.split('.')[1];\n    var decodedJson = Buffer.from(payloadBase64, 'base64').toString();\n    var expiration = JSON.parse(decodedJson).exp * 1000;\n    return Date.now() <= expiration;\n  } else return false;\n};","map":{"version":3,"names":["AsyncStorage","Buffer","getHost","jwt_decode","tokenList","setTokens","_ref","accessToken","refreshToken","console","info","multiSet","catch","error","message","getTokens","_ref2","_asyncToGenerator","kvArray","multiGet","graphqlHost","apply","arguments","hasValidTokens","_ref3","_yield$getTokens","isTokenValid","clearTokens","multiRemove","tokenExpiryTime","token","_jwt_decode","Date","iat","length","payloadBase64","split","decodedJson","from","toString","expiration","JSON","parse","exp","now"],"sources":["C:/Users/HP/Downloads/E-Learn/auth-demo/reactnativeapp/util/tokens.ts"],"sourcesContent":["// manage security tokens sent and received from the server\r\n\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { Buffer } from 'buffer';\r\nimport { getHost } from '../graphql/getHost';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nconst tokenList = ['graphqlHost', 'accessToken', 'refreshToken']; //order is important!\r\n\r\nexport interface tokens {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n\r\ninterface iToken {\r\n  id: string;\r\n  exp: number;\r\n  iat: number;\r\n}\r\n\r\nexport const setTokens = ({ accessToken, refreshToken }: tokens) => {\r\n  console.info(`got new tokens!`);\r\n  AsyncStorage.multiSet([\r\n    ['graphqlHost', getHost()],\r\n    ['accessToken', accessToken],\r\n    ['refreshToken', refreshToken],\r\n  ]).catch((error: any) => {\r\n    console.error(`Error setting tokens: ${error.message}`);\r\n  });\r\n};\r\n\r\nexport const getTokens = async () => {\r\n  const kvArray = await AsyncStorage.multiGet(tokenList);\r\n  /* in development and staging we often bounce around between servers with different private keys\r\n   * by associating tokens with a particular server we can avoid invalid token errors */\r\n  const graphqlHost = kvArray[0][1];\r\n  return graphqlHost === getHost()\r\n    ? { accessToken: kvArray[1][1], refreshToken: kvArray[2][1] }\r\n    : { accessToken: null, refreshToken: null };\r\n};\r\n\r\n// see if the app has tokens set and at least one is not expired\r\nexport const hasValidTokens = async () => {\r\n  const { accessToken, refreshToken } = await getTokens();\r\n  return isTokenValid(accessToken) || isTokenValid(refreshToken);\r\n};\r\n\r\nexport const clearTokens = () => {\r\n  AsyncStorage.multiRemove(tokenList);\r\n};\r\n\r\nexport const tokenExpiryTime = (token: string) =>\r\n  new Date(jwt_decode<iToken>(token)?.iat);\r\n\r\n// adapted from https://stackoverflow.com/a/69058154/2805154\r\nconst isTokenValid = (token: string | null) => {\r\n  if (token?.length) {\r\n    const payloadBase64 = token.split('.')[1];\r\n    const decodedJson = Buffer.from(payloadBase64, 'base64').toString();\r\n    const expiration = JSON.parse(decodedJson).exp * 1000;\r\n    return Date.now() <= expiration;\r\n  } else return false;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}