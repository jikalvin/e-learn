{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\", \"mode\", \"position\", \"accessibilityLabel\", \"disabled\", \"labelVariant\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport Checkbox from \"./Checkbox\";\nimport CheckboxAndroid from \"./CheckboxAndroid\";\nimport CheckboxIOS from \"./CheckboxIOS\";\nvar CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n    status = _ref.status,\n    label = _ref.label,\n    onPress = _ref.onPress,\n    labelStyle = _ref.labelStyle,\n    themeOverrides = _ref.theme,\n    testID = _ref.testID,\n    mode = _ref.mode,\n    _ref$position = _ref.position,\n    position = _ref$position === void 0 ? 'trailing' : _ref$position,\n    _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n    disabled = _ref.disabled,\n    _ref$labelVariant = _ref.labelVariant,\n    labelVariant = _ref$labelVariant === void 0 ? 'bodyLarge' : _ref$labelVariant,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var checkboxProps = _objectSpread(_objectSpread({}, props), {}, {\n    status: status,\n    theme: theme,\n    disabled: disabled\n  });\n  var isLeading = position === 'leading';\n  var checkbox;\n  if (mode === 'android') {\n    checkbox = React.createElement(CheckboxAndroid, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = React.createElement(CheckboxIOS, checkboxProps);\n  } else {\n    checkbox = React.createElement(Checkbox, checkboxProps);\n  }\n  var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  var textAlign = isLeading ? 'right' : 'left';\n  var computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign: textAlign\n  };\n  return React.createElement(TouchableRipple, {\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked',\n      disabled: disabled\n    },\n    onPress: onPress,\n    testID: testID,\n    disabled: disabled,\n    theme: theme\n  }, React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, React.createElement(Text, {\n    variant: labelVariant,\n    style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n  }, label), !isLeading && checkbox));\n};\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default CheckboxItem;\nexport { CheckboxItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["CheckboxItem.tsx"],"names":["React","useInternalTheme","TouchableRipple","Text","Checkbox","CheckboxAndroid","CheckboxIOS","CheckboxItem","style","status","label","onPress","labelStyle","theme","themeOverrides","testID","mode","position","accessibilityLabel","disabled","labelVariant","props","checkboxProps","isLeading","checkbox","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","color","checked","styles","container","font","displayName","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = _ref => {\n  let {\n    style,\n    status,\n    label,\n    onPress,\n    labelStyle,\n    theme: themeOverrides,\n    testID,\n    mode,\n    position = 'trailing',\n    accessibilityLabel = label,\n    disabled,\n    labelVariant = 'bodyLarge',\n    ...props\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const checkboxProps = {\n    ...props,\n    status,\n    theme,\n    disabled\n  };\n  const isLeading = position === 'leading';\n  let checkbox;\n  if (mode === 'android') {\n    checkbox = /*#__PURE__*/React.createElement(CheckboxAndroid, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = /*#__PURE__*/React.createElement(CheckboxIOS, checkboxProps);\n  } else {\n    checkbox = /*#__PURE__*/React.createElement(Checkbox, checkboxProps);\n  }\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign\n  };\n  return /*#__PURE__*/React.createElement(TouchableRipple, {\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked',\n      disabled\n    },\n    onPress: onPress,\n    testID: testID,\n    disabled: disabled,\n    theme: theme\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, /*#__PURE__*/React.createElement(Text, {\n    variant: labelVariant,\n    style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n  }, label), !isLeading && checkbox));\n};\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default CheckboxItem;\n\n// @component-docs ignore-next-line\nexport { CheckboxItem };\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});\n//# sourceMappingURL=CheckboxItem.js.map"]},"metadata":{},"sourceType":"module"}