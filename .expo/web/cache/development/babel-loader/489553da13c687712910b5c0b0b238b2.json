{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { useInternalTheme } from \"../../core/theming\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { getSegmentedButtonBorderRadius, getSegmentedButtonColors, getSegmentedButtonDensityPadding } from \"./utils\";\nvar SegmentedButtonItem = function SegmentedButtonItem(_ref) {\n  var checked = _ref.checked,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    style = _ref.style,\n    showSelectedCheck = _ref.showSelectedCheck,\n    icon = _ref.icon,\n    testID = _ref.testID,\n    label = _ref.label,\n    onPress = _ref.onPress,\n    segment = _ref.segment,\n    _ref$density = _ref.density,\n    density = _ref$density === void 0 ? 'regular' : _ref$density,\n    themeOverrides = _ref.theme;\n  var theme = useInternalTheme(themeOverrides);\n  var checkScale = React.useRef(new Animated.Value(0)).current;\n  React.useEffect(function () {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n  var roundness = theme.roundness,\n    isV3 = theme.isV3;\n  var _getSegmentedButtonCo = getSegmentedButtonColors({\n      checked: checked,\n      theme: theme,\n      disabled: disabled\n    }),\n    borderColor = _getSegmentedButtonCo.borderColor,\n    textColor = _getSegmentedButtonCo.textColor,\n    borderWidth = _getSegmentedButtonCo.borderWidth,\n    backgroundColor = _getSegmentedButtonCo.backgroundColor;\n  var borderRadius = (isV3 ? 5 : 1) * roundness;\n  var segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme: theme,\n    segment: segment\n  });\n  var rippleColor = color(textColor).alpha(0.12).rgb().string();\n  var showIcon = !icon ? false : label && checked ? !showSelectedCheck : true;\n  var showCheckedIcon = checked && showSelectedCheck;\n  var iconSize = isV3 ? 18 : 16;\n  var iconStyle = _objectSpread({\n    marginRight: label ? 5 : showCheckedIcon ? 3 : 0\n  }, label && {\n    transform: [{\n      scale: checkScale.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })\n    }]\n  });\n  var buttonStyle = _objectSpread({\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: borderRadius\n  }, segmentBorderRadius);\n  var paddingVertical = getSegmentedButtonDensityPadding({\n    density: density\n  });\n  var rippleStyle = _objectSpread({\n    borderRadius: borderRadius\n  }, segmentBorderRadius);\n  var labelTextStyle = _objectSpread(_objectSpread({}, !isV3 ? {\n    textTransform: 'uppercase',\n    fontWeight: '500'\n  } : theme.fonts.labelLarge), {}, {\n    color: textColor\n  });\n  return React.createElement(View, {\n    style: [buttonStyle, styles.button, style]\n  }, React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityRole: \"button\",\n    disabled: disabled,\n    rippleColor: rippleColor,\n    testID: testID,\n    style: rippleStyle,\n    theme: theme\n  }, React.createElement(View, {\n    style: [styles.content, {\n      paddingVertical: paddingVertical\n    }]\n  }, showCheckedIcon ? React.createElement(Animated.View, {\n    testID: testID + \"-check-icon\",\n    style: [iconStyle, {\n      transform: [{\n        scale: checkScale\n      }]\n    }]\n  }, React.createElement(Icon, {\n    source: 'check',\n    size: iconSize\n  })) : null, showIcon ? React.createElement(Animated.View, {\n    testID: testID + \"-icon\",\n    style: iconStyle\n  }, React.createElement(Icon, {\n    source: icon,\n    size: iconSize,\n    color: disabled ? textColor : undefined\n  })) : null, React.createElement(Text, {\n    variant: \"labelLarge\",\n    style: [styles.label, labelTextStyle],\n    selectable: false,\n    numberOfLines: 1\n  }, label))));\n};\nvar styles = StyleSheet.create({\n  button: {\n    flex: 1,\n    minWidth: 76,\n    borderStyle: 'solid'\n  },\n  label: {\n    textAlign: 'center'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16\n  }\n});\nexport default SegmentedButtonItem;\nexport { SegmentedButtonItem as SegmentedButton };","map":{"version":3,"sources":["SegmentedButtonItem.tsx"],"names":["React","color","useInternalTheme","Icon","TouchableRipple","Text","getSegmentedButtonBorderRadius","getSegmentedButtonColors","getSegmentedButtonDensityPadding","SegmentedButtonItem","checked","accessibilityLabel","disabled","style","showSelectedCheck","icon","testID","label","onPress","segment","density","theme","themeOverrides","checkScale","useRef","Animated","Value","current","useEffect","spring","toValue","useNativeDriver","start","roundness","isV3","borderColor","textColor","borderWidth","backgroundColor","borderRadius","segmentBorderRadius","rippleColor","alpha","rgb","string","showIcon","showCheckedIcon","iconSize","iconStyle","marginRight","transform","scale","interpolate","inputRange","outputRange","buttonStyle","paddingVertical","rippleStyle","labelTextStyle","textTransform","fontWeight","fonts","labelLarge","styles","button","content","undefined","StyleSheet","create","flex","minWidth","borderStyle","textAlign","flexDirection","alignItems","justifyContent","paddingHorizontal","SegmentedButton"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { useInternalTheme } from '../../core/theming';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { getSegmentedButtonBorderRadius, getSegmentedButtonColors, getSegmentedButtonDensityPadding } from './utils';\nconst SegmentedButtonItem = _ref => {\n  let {\n    checked,\n    accessibilityLabel,\n    disabled,\n    style,\n    showSelectedCheck,\n    icon,\n    testID,\n    label,\n    onPress,\n    segment,\n    density = 'regular',\n    theme: themeOverrides\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const checkScale = React.useRef(new Animated.Value(0)).current;\n  React.useEffect(() => {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n  const {\n    roundness,\n    isV3\n  } = theme;\n  const {\n    borderColor,\n    textColor,\n    borderWidth,\n    backgroundColor\n  } = getSegmentedButtonColors({\n    checked,\n    theme,\n    disabled\n  });\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme,\n    segment\n  });\n  const rippleColor = color(textColor).alpha(0.12).rgb().string();\n  const showIcon = !icon ? false : label && checked ? !showSelectedCheck : true;\n  const showCheckedIcon = checked && showSelectedCheck;\n  const iconSize = isV3 ? 18 : 16;\n  const iconStyle = {\n    marginRight: label ? 5 : showCheckedIcon ? 3 : 0,\n    ...(label && {\n      transform: [{\n        scale: checkScale.interpolate({\n          inputRange: [0, 1],\n          outputRange: [1, 0]\n        })\n      }]\n    })\n  };\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    ...segmentBorderRadius\n  };\n  const paddingVertical = getSegmentedButtonDensityPadding({\n    density\n  });\n  const rippleStyle = {\n    borderRadius,\n    ...segmentBorderRadius\n  };\n  const labelTextStyle = {\n    ...(!isV3 ? {\n      textTransform: 'uppercase',\n      fontWeight: '500'\n    } : theme.fonts.labelLarge),\n    color: textColor\n  };\n  return /*#__PURE__*/React.createElement(View, {\n    style: [buttonStyle, styles.button, style]\n  }, /*#__PURE__*/React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityState: {\n      disabled,\n      checked\n    },\n    accessibilityRole: \"button\",\n    disabled: disabled,\n    rippleColor: rippleColor,\n    testID: testID,\n    style: rippleStyle,\n    theme: theme\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.content, {\n      paddingVertical\n    }]\n  }, showCheckedIcon ? /*#__PURE__*/React.createElement(Animated.View, {\n    testID: `${testID}-check-icon`,\n    style: [iconStyle, {\n      transform: [{\n        scale: checkScale\n      }]\n    }]\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: 'check',\n    size: iconSize\n  })) : null, showIcon ? /*#__PURE__*/React.createElement(Animated.View, {\n    testID: `${testID}-icon`,\n    style: iconStyle\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    size: iconSize,\n    color: disabled ? textColor : undefined\n  })) : null, /*#__PURE__*/React.createElement(Text, {\n    variant: \"labelLarge\",\n    style: [styles.label, labelTextStyle],\n    selectable: false,\n    numberOfLines: 1\n  }, label))));\n};\nconst styles = StyleSheet.create({\n  button: {\n    flex: 1,\n    minWidth: 76,\n    borderStyle: 'solid'\n  },\n  label: {\n    textAlign: 'center'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16\n  }\n});\nexport default SegmentedButtonItem;\nexport { SegmentedButtonItem as SegmentedButton };\n//# sourceMappingURL=SegmentedButtonItem.js.map"]},"metadata":{},"sourceType":"module"}