{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"icon\", \"onPress\", \"forceTextInputFocus\", \"color\", \"theme\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../../core/theming\";\nimport IconButton from \"../../IconButton/IconButton\";\nimport { ICON_SIZE } from \"../constants\";\nimport { getConstants } from \"../helpers\";\nvar StyleContext = React.createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: function forceFocus() {},\n  testID: ''\n});\nvar IconAdornment = function IconAdornment(_ref) {\n  var icon = _ref.icon,\n    topPosition = _ref.topPosition,\n    side = _ref.side,\n    isTextInputFocused = _ref.isTextInputFocused,\n    forceFocus = _ref.forceFocus,\n    testID = _ref.testID,\n    themeOverrides = _ref.theme;\n  var _useInternalTheme = useInternalTheme(themeOverrides),\n    isV3 = _useInternalTheme.isV3;\n  var _getConstants = getConstants(isV3),\n    ICON_OFFSET = _getConstants.ICON_OFFSET;\n  var style = _defineProperty({\n    top: topPosition\n  }, side, ICON_OFFSET);\n  var contextState = {\n    style: style,\n    isTextInputFocused: isTextInputFocused,\n    forceFocus: forceFocus,\n    testID: testID\n  };\n  return React.createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\nvar TextInputIcon = function TextInputIcon(_ref2) {\n  var icon = _ref2.icon,\n    onPress = _ref2.onPress,\n    forceTextInputFocus = _ref2.forceTextInputFocus,\n    color = _ref2.color,\n    themeOverrides = _ref2.theme,\n    rest = _objectWithoutProperties(_ref2, _excluded);\n  var _React$useContext = React.useContext(StyleContext),\n    style = _React$useContext.style,\n    isTextInputFocused = _React$useContext.isTextInputFocused,\n    forceFocus = _React$useContext.forceFocus,\n    testID = _React$useContext.testID;\n  var onPressWithFocusControl = React.useCallback(function (e) {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress === null || onPress === void 0 ? void 0 : onPress(e);\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n  var theme = useInternalTheme(themeOverrides);\n  var iconColor = color;\n  if (theme.isV3) {\n    if (rest.disabled) {\n      iconColor = theme.colors.onSurface;\n    }\n    iconColor = theme.colors.onSurfaceVariant;\n  } else {\n    iconColor = theme.colors.text;\n  }\n  return React.createElement(View, {\n    style: [styles.container, style]\n  }, React.createElement(IconButton, _extends({\n    icon: icon,\n    style: styles.iconButton,\n    size: ICON_SIZE,\n    onPress: onPressWithFocusControl,\n    iconColor: typeof color === 'function' ? color(isTextInputFocused) : iconColor,\n    testID: testID,\n    theme: themeOverrides\n  }, rest)));\n};\nTextInputIcon.displayName = 'TextInput.Icon';\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\nexport default TextInputIcon;\nexport { IconAdornment };","map":{"version":3,"sources":["TextInputIcon.tsx"],"names":["React","useInternalTheme","IconButton","ICON_SIZE","getConstants","StyleContext","createContext","style","isTextInputFocused","forceFocus","testID","IconAdornment","icon","topPosition","side","theme","themeOverrides","isV3","ICON_OFFSET","top","contextState","TextInputIcon","onPress","forceTextInputFocus","color","rest","useContext","onPressWithFocusControl","useCallback","e","iconColor","disabled","colors","onSurface","onSurfaceVariant","text","styles","container","iconButton","displayName","defaultProps","StyleSheet","create","position","width","height","justifyContent","alignItems","margin"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useInternalTheme } from '../../../core/theming';\nimport IconButton from '../../IconButton/IconButton';\nimport { ICON_SIZE } from '../constants';\nimport { getConstants } from '../helpers';\nconst StyleContext = /*#__PURE__*/React.createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n  testID: ''\n});\nconst IconAdornment = _ref => {\n  let {\n    icon,\n    topPosition,\n    side,\n    isTextInputFocused,\n    forceFocus,\n    testID,\n    theme: themeOverrides\n  } = _ref;\n  const {\n    isV3\n  } = useInternalTheme(themeOverrides);\n  const {\n    ICON_OFFSET\n  } = getConstants(isV3);\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET\n  };\n  const contextState = {\n    style,\n    isTextInputFocused,\n    forceFocus,\n    testID\n  };\n  return /*#__PURE__*/React.createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/textinput-flat.icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon icon=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = _ref2 => {\n  let {\n    icon,\n    onPress,\n    forceTextInputFocus,\n    color,\n    theme: themeOverrides,\n    ...rest\n  } = _ref2;\n  const {\n    style,\n    isTextInputFocused,\n    forceFocus,\n    testID\n  } = React.useContext(StyleContext);\n  const onPressWithFocusControl = React.useCallback(e => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress === null || onPress === void 0 ? void 0 : onPress(e);\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n  const theme = useInternalTheme(themeOverrides);\n  let iconColor = color;\n  if (theme.isV3) {\n    if (rest.disabled) {\n      iconColor = theme.colors.onSurface;\n    }\n    iconColor = theme.colors.onSurfaceVariant;\n  } else {\n    iconColor = theme.colors.text;\n  }\n  return /*#__PURE__*/React.createElement(View, {\n    style: [styles.container, style]\n  }, /*#__PURE__*/React.createElement(IconButton, _extends({\n    icon: icon,\n    style: styles.iconButton,\n    size: ICON_SIZE,\n    onPress: onPressWithFocusControl,\n    iconColor: typeof color === 'function' ? color(isTextInputFocused) : iconColor,\n    testID: testID,\n    theme: themeOverrides\n  }, rest)));\n};\nTextInputIcon.displayName = 'TextInput.Icon';\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true\n};\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n//# sourceMappingURL=TextInputIcon.js.map"]},"metadata":{},"sourceType":"module"}