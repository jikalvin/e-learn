{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _templateObject;\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport React, { useState } from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport { setTokens } from \"../util/tokens\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LOGIN = gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  mutation logMeIn($username: String!, $password: String!) {\\n    login(username: $username, password: $password) {\\n      id\\n      accessToken\\n      refreshToken\\n    }\\n  }\\n\"])));\nexport var Login = function Login(_ref) {\n  var setLoggedIn = _ref.setLoggedIn;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    credError = _useState6[0],\n    setCredError = _useState6[1];\n  var _useMutation = useMutation(LOGIN, {\n      variables: {\n        username: username,\n        password: password\n      },\n      onCompleted: function onCompleted(_ref2) {\n        var login = _ref2.login;\n        setTokens(login);\n        setLoggedIn(true);\n        setCredError(false);\n      },\n      onError: function onError(error) {\n        setCredError(true);\n      }\n    }),\n    _useMutation2 = _slicedToArray(_useMutation, 1),\n    mutate = _useMutation2[0];\n  return _jsxs(KeyboardAvoidingView, {\n    children: [_jsx(Text, {\n      style: styles.label,\n      children: \"Please login!\"\n    }), _jsx(TextInput, {\n      keyboardType: \"name-phone-pad\",\n      textContentType: \"name\",\n      clearButtonMode: 'always',\n      onChangeText: function onChangeText(text) {\n        setUsername(text);\n        setCredError(false);\n      },\n      placeholder: \"username\",\n      autoFocus: true,\n      style: styles.textInput,\n      autoCorrect: false\n    }), _jsx(TextInput, {\n      keyboardType: \"default\",\n      secureTextEntry: true,\n      clearButtonMode: 'always',\n      onChangeText: function onChangeText(text) {\n        setPassword(text);\n        setCredError(false);\n      },\n      placeholder: \"password\",\n      style: styles.textInput,\n      autoCorrect: false\n    }), credError ? _jsx(Text, {\n      style: styles.error,\n      children: \"Invalid credentials\"\n    }) : null, _jsx(Button, {\n      title: \"Login\",\n      onPress: function onPress() {\n        mutate();\n      }\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  error: {\n    color: 'red',\n    fontSize: 14,\n    textAlign: 'center'\n  },\n  label: {\n    textAlign: 'center',\n    padding: 5\n  },\n  textInput: {\n    width: 200,\n    textAlign: 'center',\n    marginVertical: 8,\n    padding: 2,\n    fontSize: 16,\n    borderRadius: 6,\n    backgroundColor: '#eee'\n  }\n});","map":{"version":3,"names":["React","useState","gql","useMutation","setTokens","jsx","_jsx","jsxs","_jsxs","LOGIN","_templateObject","_taggedTemplateLiteralLoose","Login","_ref","setLoggedIn","_useState","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","_useState5","_useState6","credError","setCredError","_useMutation","variables","onCompleted","_ref2","login","onError","error","_useMutation2","mutate","KeyboardAvoidingView","children","Text","style","styles","label","TextInput","keyboardType","textContentType","clearButtonMode","onChangeText","text","placeholder","autoFocus","textInput","autoCorrect","secureTextEntry","Button","title","onPress","StyleSheet","create","color","fontSize","textAlign","padding","width","marginVertical","borderRadius","backgroundColor"],"sources":["C:/Users/HP/Downloads/E-Learn/auth-demo/reactnativeapp/components/Login.tsx"],"sourcesContent":["import { Button, Text } from 'react-native';\r\nimport { KeyboardAvoidingView, StyleSheet, TextInput } from 'react-native';\r\nimport React, { useState } from 'react';\r\nimport { gql, useMutation } from '@apollo/client';\r\n\r\nimport { setTokens } from '../util/tokens';\r\n\r\nconst LOGIN = gql`\r\n  mutation logMeIn($username: String!, $password: String!) {\r\n    login(username: $username, password: $password) {\r\n      id\r\n      accessToken\r\n      refreshToken\r\n    }\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  setLoggedIn: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nexport const Login: React.FC<Props> = ({ setLoggedIn }) => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [credError, setCredError] = useState(false);\r\n  const [mutate] = useMutation(LOGIN, {\r\n    variables: { username, password },\r\n    onCompleted: ({ login }) => {\r\n      setTokens(login);\r\n      setLoggedIn(true);\r\n      setCredError(false);\r\n    },\r\n    onError: (error) => {\r\n      setCredError(true);\r\n    },\r\n  });\r\n  return (\r\n    <KeyboardAvoidingView>\r\n      <Text style={styles.label}>Please login!</Text>\r\n      <TextInput\r\n        keyboardType=\"name-phone-pad\"\r\n        textContentType=\"name\"\r\n        clearButtonMode={'always'}\r\n        onChangeText={(text) => {\r\n          setUsername(text);\r\n          setCredError(false);\r\n        }}\r\n        placeholder=\"username\"\r\n        autoFocus={true}\r\n        style={styles.textInput}\r\n        autoCorrect={false}\r\n      />\r\n\r\n      <TextInput\r\n        keyboardType=\"default\"\r\n        secureTextEntry={true}\r\n        clearButtonMode={'always'}\r\n        onChangeText={(text) => {\r\n          setPassword(text);\r\n          setCredError(false);\r\n        }}\r\n        placeholder=\"password\"\r\n        style={styles.textInput}\r\n        autoCorrect={false}\r\n      />\r\n      {credError ? <Text style={styles.error}>Invalid credentials</Text> : null}\r\n      <Button\r\n        title=\"Login\"\r\n        onPress={() => {\r\n          mutate();\r\n        }}\r\n      />\r\n    </KeyboardAvoidingView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  error: {\r\n    color: 'red',\r\n    fontSize: 14,\r\n    textAlign: 'center',\r\n  },\r\n  label: {\r\n    textAlign: 'center',\r\n    padding: 5,\r\n  },\r\n  textInput: {\r\n    width: 200,\r\n    textAlign: 'center',\r\n    marginVertical: 8,\r\n    padding: 2,\r\n    fontSize: 16,\r\n    borderRadius: 6,\r\n    backgroundColor: '#eee',\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}