{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport SegmentedButtonItem from \"./SegmentedButtonItem\";\nimport { getDisabledSegmentedButtonStyle } from \"./utils\";\nvar SegmentedButtons = function SegmentedButtons(_ref) {\n  var value = _ref.value,\n    onValueChange = _ref.onValueChange,\n    buttons = _ref.buttons,\n    multiSelect = _ref.multiSelect,\n    density = _ref.density,\n    style = _ref.style,\n    themeOverrides = _ref.theme;\n  var theme = useInternalTheme(themeOverrides);\n  return React.createElement(View, {\n    style: [styles.row, style]\n  }, buttons.map(function (item, i) {\n    var disabledChildStyle = getDisabledSegmentedButtonStyle({\n      theme: theme,\n      buttons: buttons,\n      index: i\n    });\n    var segment = i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n    var checked = multiSelect && Array.isArray(value) ? value.includes(item.value) : value === item.value;\n    var onPress = function onPress(e) {\n      var _item$onPress;\n      (_item$onPress = item.onPress) === null || _item$onPress === void 0 ? void 0 : _item$onPress.call(item, e);\n      var nextValue = multiSelect && Array.isArray(value) ? checked ? value.filter(function (val) {\n        return item.value !== val;\n      }) : [].concat(_toConsumableArray(value), [item.value]) : item.value;\n      onValueChange(nextValue);\n    };\n    return React.createElement(SegmentedButtonItem, _extends({}, item, {\n      key: i,\n      checked: checked,\n      segment: segment,\n      density: density,\n      onPress: onPress,\n      style: [item.style, disabledChildStyle],\n      theme: theme\n    }));\n  }));\n};\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  }\n});\nexport default SegmentedButtons;\nexport { SegmentedButtons };","map":{"version":3,"sources":["SegmentedButtons.tsx"],"names":["React","useInternalTheme","SegmentedButtonItem","getDisabledSegmentedButtonStyle","SegmentedButtons","value","onValueChange","buttons","multiSelect","density","style","theme","themeOverrides","styles","row","map","item","i","disabledChildStyle","index","segment","length","undefined","checked","Array","isArray","includes","onPress","e","nextValue","filter","val","StyleSheet","create","flexDirection"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAA,UAAA;AAAA,OAAA,IAAA;AAW9B,SAASC,gBAAgB;AAEzB,OAAOC,mBAAmB;AAC1B,SAASC,+BAA+B;AAgHxC,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAG,IAAA,EAQZ;EARa,IACxBC,KAAK,GAOC,IAAA,CAPNA,KAAK;IACLC,aAAa,GAMP,IAAA,CANNA,aAAa;IACbC,OAAO,GAKD,IAAA,CALNA,OAAO;IACPC,WAAW,GAIL,IAAA,CAJNA,WAAW;IACXC,OAAO,GAGD,IAAA,CAHNA,OAAO;IACPC,KAAK,GAEC,IAAA,CAFNA,KAAK;IACEE,cAAAA,GACD,IAAA,CADND,KAAK;EAEL,IAAMA,KAAK,GAAGV,gBAAgB,CAACW,cAAc,CAAC;EAE9C,OACE,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA;IAAC,KAAK,EAAE,CAACC,MAAM,CAACC,GAAG,EAAEJ,KAAK;EAAE,CAAA,EAC9BH,OAAO,CAACQ,GAAG,CAAC,UAACC,IAAI,EAAEC,CAAC,EAAK;IACxB,IAAMC,kBAAkB,GAAGf,+BAA+B,CAAC;MACzDQ,KAAK,EAALA,KAAK;MACLJ,OAAO,EAAPA,OAAO;MACPY,KAAK,EAAEF;IACT,CAAC,CAAC;IACF,IAAMG,OAAO,GACXH,CAAC,KAAK,CAAC,GAAG,OAAO,GAAGA,CAAC,KAAKV,OAAO,CAACc,MAAM,GAAG,CAAC,GAAG,MAAM,GAAGC,SAAS;IAEnE,IAAMC,OAAO,GACXf,WAAW,IAAIgB,KAAK,CAACC,OAAO,CAACpB,KAAK,CAAC,GAC/BA,KAAK,CAACqB,QAAQ,CAACV,IAAI,CAACX,KAAK,CAAC,GAC1BA,KAAK,KAAKW,IAAI,CAACX,KAAK;IAE1B,IAAMsB,OAAO,GAAIC,SAAXD,OAAO,CAAIC,CAAwB,EAAK;MAAA,IAAA,aAAA;MAC5C,CAAA,aAAA,GAAA,IAAI,CAACD,OAAO,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZ,aAAA,CAAA,IAAA,CAAA,IAAI,EAAWC,CAAC,CAAC;MAEjB,IAAMC,SAAS,GACbrB,WAAW,IAAIgB,KAAK,CAACC,OAAO,CAACpB,KAAK,CAAC,GAC/BkB,OAAO,GACLlB,KAAK,CAACyB,MAAM,CAAEC,UAAAA,GAAG;QAAA,OAAKf,IAAI,CAACX,KAAK,KAAK0B,GAAG;MAAA,EAAC,MAAA,MAAA,CAAA,kBAAA,CACrC1B,KAAK,IAAEW,IAAI,CAACX,KAAK,EAAC,GACxBW,IAAI,CAACX,KAAK;MAGhBC,aAAa,CAACuB,SAAS,CAAC;IAC1B,CAAC;IAED,OACE,KAAA,CAAA,aAAA,CAAC,mBAAmB,EAAA,QAAA,CAAA,CAAA,CAAA,EACdb,IAAI,EAAA;MACR,GAAG,EAAEC,CAAE;MACP,OAAO,EAAEM,OAAQ;MACjB,OAAO,EAAEH,OAAQ;MACjB,OAAO,EAAEX,OAAQ;MACjB,OAAO,EAAEkB,OAAQ;MACjB,KAAK,EAAE,CAACX,IAAI,CAACN,KAAK,EAAEQ,kBAAkB,CAAE;MACxC,KAAK,EAAEP;IAAM,CAAA,CAAA,CACb;EAEN,CAAC,CAAC,CACG;AAEX,CAAC;AAED,IAAME,MAAM,GAAGmB,UAAU,CAACC,MAAM,CAAC;EAC/BnB,GAAG,EAAE;IACHoB,aAAa,EAAE;EACjB;AACF,CAAC,CAAC;AAEF,eAAe9B,gBAAgB;AAG/B,SAASA,gBAAoC","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport SegmentedButtonItem from './SegmentedButtonItem';\nimport { getDisabledSegmentedButtonStyle } from './utils';\n/**\n * Segmented buttons can be used to select options, switch views or sort elements.</br>\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/segmented-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { SafeAreaView, StyleSheet } from 'react-native';\n * import { SegmentedButtons } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('');\n *\n *   return (\n *     <SafeAreaView style={styles.container}>\n *       <SegmentedButtons\n *         value={value}\n *         onValueChange={setValue}\n *         buttons={[\n *           {\n *             value: 'walk',\n *             label: 'Walking',\n *           },\n *           {\n *             value: 'train',\n *             label: 'Transit',\n *           },\n *           { value: 'drive', label: 'Driving' },\n *         ]}\n *       />\n *     </SafeAreaView>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     alignItems: 'center',\n *   },\n * });\n *\n * export default MyComponent;\n *```\n */\nconst SegmentedButtons = _ref => {\n  let {\n    value,\n    onValueChange,\n    buttons,\n    multiSelect,\n    density,\n    style,\n    theme: themeOverrides\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  return /*#__PURE__*/React.createElement(View, {\n    style: [styles.row, style]\n  }, buttons.map((item, i) => {\n    const disabledChildStyle = getDisabledSegmentedButtonStyle({\n      theme,\n      buttons,\n      index: i\n    });\n    const segment = i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n    const checked = multiSelect && Array.isArray(value) ? value.includes(item.value) : value === item.value;\n    const onPress = e => {\n      var _item$onPress;\n      (_item$onPress = item.onPress) === null || _item$onPress === void 0 ? void 0 : _item$onPress.call(item, e);\n      const nextValue = multiSelect && Array.isArray(value) ? checked ? value.filter(val => item.value !== val) : [...value, item.value] : item.value;\n\n      // @ts-expect-error: TS doesn't preserve types after destructuring, so the type isn't inferred correctly\n      onValueChange(nextValue);\n    };\n    return /*#__PURE__*/React.createElement(SegmentedButtonItem, _extends({}, item, {\n      key: i,\n      checked: checked,\n      segment: segment,\n      density: density,\n      onPress: onPress,\n      style: [item.style, disabledChildStyle],\n      theme: theme\n    }));\n  }));\n};\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  }\n});\nexport default SegmentedButtons;\n\n// @component-docs ignore-next-line\nexport { SegmentedButtons };\n//# sourceMappingURL=SegmentedButtons.js.map"]},"metadata":{},"sourceType":"module"}