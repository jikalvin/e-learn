{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar overflowLeft = function overflowLeft(center) {\n  return center < 0;\n};\nvar overflowRight = function overflowRight(center, tooltipWidth) {\n  var _Dimensions$get = Dimensions.get('window'),\n    layoutWidth = _Dimensions$get.width;\n  return center + tooltipWidth > layoutWidth;\n};\nvar overflowBottom = function overflowBottom(childrenY, childrenHeight, tooltipHeight) {\n  var _Dimensions$get2 = Dimensions.get('window'),\n    layoutHeight = _Dimensions$get2.height;\n  return childrenY + childrenHeight + tooltipHeight > layoutHeight;\n};\nvar getTooltipXPosition = function getTooltipXPosition(_ref, _ref2) {\n  var childrenX = _ref.pageX,\n    childrenWidth = _ref.width;\n  var tooltipWidth = _ref2.width;\n  var center = childrenX + (childrenWidth - tooltipWidth) / 2;\n  if (overflowLeft(center)) return childrenX;\n  if (overflowRight(center, tooltipWidth)) return childrenX + childrenWidth - tooltipWidth;\n  return center;\n};\nvar getTooltipYPosition = function getTooltipYPosition(_ref3, _ref4) {\n  var childrenY = _ref3.pageY,\n    childrenHeight = _ref3.height;\n  var tooltipHeight = _ref4.height;\n  if (overflowBottom(childrenY, childrenHeight, tooltipHeight)) return childrenY - tooltipHeight;\n  return childrenY + childrenHeight;\n};\nexport var getTooltipPosition = function getTooltipPosition(_ref5) {\n  var children = _ref5.children,\n    tooltip = _ref5.tooltip,\n    measured = _ref5.measured;\n  if (!measured) return {};\n  return {\n    left: getTooltipXPosition(children, tooltip),\n    top: getTooltipYPosition(children, tooltip)\n  };\n};","map":{"version":3,"sources":["utils.ts"],"names":["overflowLeft","center","overflowRight","tooltipWidth","width","layoutWidth","Dimensions","get","overflowBottom","childrenY","childrenHeight","tooltipHeight","height","layoutHeight","getTooltipXPosition","pageX","childrenX","childrenWidth","getTooltipYPosition","pageY","getTooltipPosition","children","tooltip","measured","left","top"],"mappings":";AAqBA,IAAMA,YAAY,GAAIC,SAAhBD,YAAY,CAAIC,MAAc,EAAc;EAChD,OAAOA,MAAM,GAAG,CAAC;AACnB,CAAC;AAMD,IAAMC,aAAa,GAAG,SAAhBA,aAAa,CAAID,MAAc,EAAEE,YAAoB,EAAc;EACvE,IAAA,eAAA,GAA+BG,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC;IAAxCF,WAAAA,GAAAA,eAAAA,CAAPD,KAAK;EAEb,OAAOH,MAAM,GAAGE,YAAY,GAAGE,WAAW;AAC5C,CAAC;AAMD,IAAMG,cAAc,GAAG,SAAjBA,cAAc,CAClBC,SAAiB,EACjBC,cAAsB,EACtBC,aAAqB,EACT;EACZ,IAAA,gBAAA,GAAiCL,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC;IAAzCM,YAAAA,GAAAA,gBAAAA,CAARD,MAAM;EAEd,OAAOH,SAAS,GAAGC,cAAc,GAAGC,aAAa,GAAGE,YAAY;AAClE,CAAC;AAED,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAG,IAAA,EAAA,KAAA,EAGf;EAFX,IAASE,SAAS,GAA6C,IAAA,CAA7DD,KAAK;IAAoBE,aAAAA,GAAoC,IAAA,CAA3Cb,KAAK;EAAsC,IACtDD,YAAAA,GAA6B,KAAA,CAApCC,KAAK;EAEP,IAAMH,MAAM,GAAGe,SAAS,GAAG,CAACC,aAAa,GAAGd,YAAY,IAAI,CAAC;EAE7D,IAAIH,YAAY,CAACC,MAAM,CAAC,EAAE,OAAOe,SAAS;EAE1C,IAAId,aAAa,CAACD,MAAM,EAAEE,YAAY,CAAC,EACrC,OAAOa,SAAS,GAAGC,aAAa,GAAGd,YAAY;EAEjD,OAAOF,MAAM;AACf,CAAC;AAED,IAAMiB,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAG,KAAA,EAAA,KAAA,EAGf;EAFX,IAAST,SAAS,GAA+C,KAAA,CAA/DU,KAAK;IAAqBT,cAAAA,GAAqC,KAAA,CAA7CE,MAAM;EAAuC,IACvDD,aAAAA,GAA8B,KAAA,CAAtCC,MAAM;EAER,IAAIJ,cAAc,CAACC,SAAS,EAAEC,cAAc,EAAEC,aAAa,CAAC,EAC1D,OAAOF,SAAS,GAAGE,aAAa;EAElC,OAAOF,SAAS,GAAGC,cAAc;AACnC,CAAC;AAED,OAAO,IAAMU,kBAAkB,GAAG,SAArBA,kBAAkB,CAAG,KAAA,EAIqB;EAJpB,IACjCC,QAAQ,GAGI,KAAA,CAHZA,QAAQ;IACRC,OAAO,GAEK,KAAA,CAFZA,OAAO;IACPC,QAAAA,GACY,KAAA,CADZA,QAAAA;EAEA,IAAI,CAACA,QAAQ,EAAE,OAAO,CAAC,CAAC;EAExB,OAAO;IACLC,IAAI,EAAEV,mBAAmB,CAACO,QAAQ,EAAEC,OAAO,CAAC;IAC5CG,GAAG,EAAEP,mBAAmB,CAACG,QAAQ,EAAEC,OAAO;EAC5C,CAAC;AACH,CAAC","sourceRoot":"../../src","sourcesContent":["import { Dimensions } from 'react-native';\n/**\n * Return true when the tooltip center x-coordinate relative to the wrapped element is negative.\n * The tooltip will be placed at the starting x-coordinate from the wrapped element.\n */\nconst overflowLeft = center => {\n  return center < 0;\n};\n\n/**\n * Return true when the tooltip center x-coordinate + tooltip width is greater than the layout width\n * The tooltip width will grow from right to left relative to the wrapped element.\n */\nconst overflowRight = (center, tooltipWidth) => {\n  const {\n    width: layoutWidth\n  } = Dimensions.get('window');\n  return center + tooltipWidth > layoutWidth;\n};\n\n/**\n * Return true when the children y-coordinate + its height + tooltip height is greater than the layout height.\n * The tooltip will be placed at the top of the wrapped element.\n */\nconst overflowBottom = (childrenY, childrenHeight, tooltipHeight) => {\n  const {\n    height: layoutHeight\n  } = Dimensions.get('window');\n  return childrenY + childrenHeight + tooltipHeight > layoutHeight;\n};\nconst getTooltipXPosition = (_ref, _ref2) => {\n  let {\n    pageX: childrenX,\n    width: childrenWidth\n  } = _ref;\n  let {\n    width: tooltipWidth\n  } = _ref2;\n  const center = childrenX + (childrenWidth - tooltipWidth) / 2;\n  if (overflowLeft(center)) return childrenX;\n  if (overflowRight(center, tooltipWidth)) return childrenX + childrenWidth - tooltipWidth;\n  return center;\n};\nconst getTooltipYPosition = (_ref3, _ref4) => {\n  let {\n    pageY: childrenY,\n    height: childrenHeight\n  } = _ref3;\n  let {\n    height: tooltipHeight\n  } = _ref4;\n  if (overflowBottom(childrenY, childrenHeight, tooltipHeight)) return childrenY - tooltipHeight;\n  return childrenY + childrenHeight;\n};\nexport const getTooltipPosition = _ref5 => {\n  let {\n    children,\n    tooltip,\n    measured\n  } = _ref5;\n  if (!measured) return {};\n  return {\n    left: getTooltipXPosition(children, tooltip),\n    top: getTooltipYPosition(children, tooltip)\n  };\n};\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}