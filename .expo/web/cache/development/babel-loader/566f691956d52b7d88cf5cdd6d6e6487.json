{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport color from 'color';\nimport { useInternalTheme } from \"../../../core/theming\";\nimport { getConstants } from \"../helpers\";\nimport { AdornmentSide } from \"./enums\";\nvar AffixContext = React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\nvar AffixAdornment = function AffixAdornment(_ref) {\n  var affix = _ref.affix,\n    side = _ref.side,\n    textStyle = _ref.textStyle,\n    topPosition = _ref.topPosition,\n    onLayout = _ref.onLayout,\n    visible = _ref.visible,\n    paddingHorizontal = _ref.paddingHorizontal,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,\n    testID = _ref.testID;\n  return React.createElement(AffixContext.Provider, {\n    value: {\n      side: side,\n      textStyle: textStyle,\n      topPosition: topPosition,\n      onLayout: onLayout,\n      visible: visible,\n      paddingHorizontal: paddingHorizontal,\n      maxFontSizeMultiplier: maxFontSizeMultiplier,\n      testID: testID\n    }\n  }, affix);\n};\nvar TextInputAffix = function TextInputAffix(_ref2) {\n  var _theme$colors;\n  var text = _ref2.text,\n    labelStyle = _ref2.textStyle,\n    themeOverrides = _ref2.theme,\n    onTextLayout = _ref2.onLayout;\n  var theme = useInternalTheme(themeOverrides);\n  var _getConstants = getConstants(theme.isV3),\n    AFFIX_OFFSET = _getConstants.AFFIX_OFFSET;\n  var _React$useContext = React.useContext(AffixContext),\n    textStyle = _React$useContext.textStyle,\n    onLayout = _React$useContext.onLayout,\n    topPosition = _React$useContext.topPosition,\n    side = _React$useContext.side,\n    visible = _React$useContext.visible,\n    paddingHorizontal = _React$useContext.paddingHorizontal,\n    maxFontSizeMultiplier = _React$useContext.maxFontSizeMultiplier,\n    testID = _React$useContext.testID;\n  var textColor = color(theme.isV3 ? theme.colors.onSurface : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n  var style = _defineProperty({\n    top: topPosition\n  }, side, offset);\n  return React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout,\n    testID: testID\n  }, React.createElement(Text, {\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle],\n    onLayout: onTextLayout,\n    testID: testID + \"-text\"\n  }, text));\n};\nTextInputAffix.displayName = 'TextInput.Affix';\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default TextInputAffix;\nexport { TextInputAffix, AffixAdornment };","map":{"version":3,"sources":["TextInputAffix.tsx"],"names":["React","color","useInternalTheme","getConstants","AdornmentSide","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","testID","TextInputAffix","text","labelStyle","theme","themeOverrides","onTextLayout","AFFIX_OFFSET","isV3","useContext","textColor","colors","onSurface","alpha","dark","rgb","string","offset","style","top","styles","container","opacity","interpolate","inputRange","outputRange","displayName","StyleSheet","create","position","justifyContent","alignItems"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet, Text } from 'react-native';\nimport color from 'color';\nimport { useInternalTheme } from '../../../core/theming';\nimport { getConstants } from '../helpers';\nimport { AdornmentSide } from './enums';\nconst AffixContext = /*#__PURE__*/React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\nconst AffixAdornment = _ref => {\n  let {\n    affix,\n    side,\n    textStyle,\n    topPosition,\n    onLayout,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n    testID\n  } = _ref;\n  return /*#__PURE__*/React.createElement(AffixContext.Provider, {\n    value: {\n      side,\n      textStyle,\n      topPosition,\n      onLayout,\n      visible,\n      paddingHorizontal,\n      maxFontSizeMultiplier,\n      testID\n    }\n  }, affix);\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = _ref2 => {\n  var _theme$colors;\n  let {\n    text,\n    textStyle: labelStyle,\n    theme: themeOverrides,\n    onLayout: onTextLayout\n  } = _ref2;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    AFFIX_OFFSET\n  } = getConstants(theme.isV3);\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n    testID\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.isV3 ? theme.colors.onSurface : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  const offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n  const style = {\n    top: topPosition,\n    [side]: offset\n  };\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout,\n    testID: testID\n  }, /*#__PURE__*/React.createElement(Text, {\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle],\n    onLayout: onTextLayout,\n    testID: `${testID}-text`\n  }, text));\n};\nTextInputAffix.displayName = 'TextInput.Affix';\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default TextInputAffix;\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n//# sourceMappingURL=TextInputAffix.js.map"]},"metadata":{},"sourceType":"module"}