{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { typescale } from \"./themes/v3/tokens\";\nexport var fontConfig = {\n  web: {\n    regular: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '400'\n    },\n    medium: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '500'\n    },\n    light: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '300'\n    },\n    thin: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '100'\n    }\n  },\n  ios: {\n    regular: {\n      fontFamily: 'System',\n      fontWeight: '400'\n    },\n    medium: {\n      fontFamily: 'System',\n      fontWeight: '500'\n    },\n    light: {\n      fontFamily: 'System',\n      fontWeight: '300'\n    },\n    thin: {\n      fontFamily: 'System',\n      fontWeight: '100'\n    }\n  },\n  default: {\n    regular: {\n      fontFamily: 'sans-serif',\n      fontWeight: 'normal'\n    },\n    medium: {\n      fontFamily: 'sans-serif-medium',\n      fontWeight: 'normal'\n    },\n    light: {\n      fontFamily: 'sans-serif-light',\n      fontWeight: 'normal'\n    },\n    thin: {\n      fontFamily: 'sans-serif-thin',\n      fontWeight: 'normal'\n    }\n  }\n};\nfunction configureV2Fonts(config) {\n  var fonts = Platform.select(_objectSpread(_objectSpread({}, fontConfig), config));\n  return fonts;\n}\nfunction configureV3Fonts(config) {\n  if (!config) {\n    return typescale;\n  }\n  var isFlatConfig = Object.keys(config).every(function (key) {\n    return typeof config[key] !== 'object';\n  });\n  if (isFlatConfig) {\n    return Object.fromEntries(Object.entries(typescale).map(function (_ref) {\n      var _ref3 = _slicedToArray(_ref, 2),\n        variantName = _ref3[0],\n        variantProperties = _ref3[1];\n      return [variantName, _objectSpread(_objectSpread({}, variantProperties), config)];\n    }));\n  }\n  return Object.assign.apply(Object, [typescale].concat(_toConsumableArray(Object.entries(config).map(function (_ref2) {\n    var _ref4 = _slicedToArray(_ref2, 2),\n      variantName = _ref4[0],\n      variantProperties = _ref4[1];\n    return _defineProperty({}, variantName, _objectSpread(_objectSpread({}, typescale[variantName]), variantProperties));\n  }))));\n}\nexport default function configureFonts(params) {\n  var _ref6 = params || {},\n    _ref6$isV = _ref6.isV3,\n    isV3 = _ref6$isV === void 0 ? true : _ref6$isV,\n    config = _ref6.config;\n  if (isV3) {\n    return configureV3Fonts(config);\n  }\n  return configureV2Fonts(config);\n}","map":{"version":3,"sources":["fonts.tsx"],"names":["typescale","fontConfig","web","regular","fontFamily","fontWeight","medium","light","thin","ios","default","configureV2Fonts","config","fonts","Platform","select","configureV3Fonts","isFlatConfig","Object","keys","every","key","fromEntries","entries","map","variantName","variantProperties","assign","configureFonts","params","isV3"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import { Platform } from 'react-native';\nimport { typescale } from './themes/v3/tokens';\nexport const fontConfig = {\n  web: {\n    regular: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '400'\n    },\n    medium: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '500'\n    },\n    light: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '300'\n    },\n    thin: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '100'\n    }\n  },\n  ios: {\n    regular: {\n      fontFamily: 'System',\n      fontWeight: '400'\n    },\n    medium: {\n      fontFamily: 'System',\n      fontWeight: '500'\n    },\n    light: {\n      fontFamily: 'System',\n      fontWeight: '300'\n    },\n    thin: {\n      fontFamily: 'System',\n      fontWeight: '100'\n    }\n  },\n  default: {\n    regular: {\n      fontFamily: 'sans-serif',\n      fontWeight: 'normal'\n    },\n    medium: {\n      fontFamily: 'sans-serif-medium',\n      fontWeight: 'normal'\n    },\n    light: {\n      fontFamily: 'sans-serif-light',\n      fontWeight: 'normal'\n    },\n    thin: {\n      fontFamily: 'sans-serif-thin',\n      fontWeight: 'normal'\n    }\n  }\n};\nfunction configureV2Fonts(config) {\n  const fonts = Platform.select({\n    ...fontConfig,\n    ...config\n  });\n  return fonts;\n}\nfunction configureV3Fonts(config) {\n  if (!config) {\n    return typescale;\n  }\n  const isFlatConfig = Object.keys(config).every(key => typeof config[key] !== 'object');\n  if (isFlatConfig) {\n    return Object.fromEntries(Object.entries(typescale).map(_ref => {\n      let [variantName, variantProperties] = _ref;\n      return [variantName, {\n        ...variantProperties,\n        ...config\n      }];\n    }));\n  }\n  return Object.assign(typescale, ...Object.entries(config).map(_ref2 => {\n    let [variantName, variantProperties] = _ref2;\n    return {\n      [variantName]: {\n        ...typescale[variantName],\n        ...variantProperties\n      }\n    };\n  }));\n}\n\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params) {\n  const {\n    isV3 = true,\n    config\n  } = params || {};\n  if (isV3) {\n    return configureV3Fonts(config);\n  }\n  return configureV2Fonts(config);\n}\n//# sourceMappingURL=fonts.js.map"]},"metadata":{},"sourceType":"module"}