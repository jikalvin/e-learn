{"ast":null,"code":"export var handlePress = function handlePress(_ref) {\n  var onPress = _ref.onPress,\n    value = _ref.value,\n    onValueChange = _ref.onValueChange,\n    event = _ref.event;\n  if (onPress && onValueChange) {\n    console.warn(\"onPress in the scope of RadioButtonGroup will not be executed, use onValueChange instead\");\n  }\n  onValueChange ? onValueChange(value) : onPress === null || onPress === void 0 ? void 0 : onPress(event);\n};\nexport var isChecked = function isChecked(_ref2) {\n  var value = _ref2.value,\n    status = _ref2.status,\n    contextValue = _ref2.contextValue;\n  if (contextValue !== undefined && contextValue !== null) {\n    return contextValue === value ? 'checked' : 'unchecked';\n  } else {\n    return status;\n  }\n};","map":{"version":3,"sources":["utils.ts"],"names":["handlePress","onPress","value","onValueChange","event","console","warn","isChecked","status","contextValue","undefined"],"mappings":"AAEA,OAAO,IAAMA,WAAW,GAAG,SAAdA,WAAW,CAAG,IAAA,EAUrB;EAVsB,IAC1BC,OAAO,GASR,IAAA,CATCA,OAAO;IACPC,KAAK,GAQN,IAAA,CARCA,KAAK;IACLC,aAAa,GAOd,IAAA,CAPCA,aAAa;IACbC,KAAAA,GAMD,IAAA,CANCA,KAAAA;EAOA,IAAIH,OAAO,IAAIE,aAAa,EAAE;IAC5BE,OAAO,CAACC,IAAI,4FAEX;EACH;EAEAH,aAAa,GAAGA,aAAa,CAACD,KAAK,CAAC,GAAGD,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAGG,KAAK,CAAC;AACzD,CAAC;AAED,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAAS,CAAG,KAAA,EAQnB;EARoB,IACxBL,KAAK,GAON,KAAA,CAPCA,KAAK;IACLM,MAAM,GAMP,KAAA,CANCA,MAAM;IACNC,YAAAA,GAKD,KAAA,CALCA,YAAAA;EAMA,IAAIA,YAAY,KAAKC,SAAS,IAAID,YAAY,KAAK,IAAI,EAAE;IACvD,OAAOA,YAAY,KAAKP,KAAK,GAAG,SAAS,GAAG,WAAW;EACzD,CAAC,MAAM;IACL,OAAOM,MAAM;EACf;AACF,CAAC","sourceRoot":"../../src","sourcesContent":["export const handlePress = _ref => {\n  let {\n    onPress,\n    value,\n    onValueChange,\n    event\n  } = _ref;\n  if (onPress && onValueChange) {\n    console.warn(`onPress in the scope of RadioButtonGroup will not be executed, use onValueChange instead`);\n  }\n  onValueChange ? onValueChange(value) : onPress === null || onPress === void 0 ? void 0 : onPress(event);\n};\nexport const isChecked = _ref2 => {\n  let {\n    value,\n    status,\n    contextValue\n  } = _ref2;\n  if (contextValue !== undefined && contextValue !== null) {\n    return contextValue === value ? 'checked' : 'unchecked';\n  } else {\n    return status;\n  }\n};\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}