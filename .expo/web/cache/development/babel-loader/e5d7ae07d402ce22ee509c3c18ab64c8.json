{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"label\", \"size\", \"style\", \"labelStyle\", \"color\", \"theme\"],\n  _excluded2 = [\"backgroundColor\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/themes/v2/colors\";\nimport getContrastingColor from \"../../utils/getContrastingColor\";\nimport Text from \"../Typography/Text\";\nvar defaultSize = 64;\nvar AvatarText = function AvatarText(_ref) {\n  var _theme$colors;\n  var label = _ref.label,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? defaultSize : _ref$size,\n    style = _ref.style,\n    labelStyle = _ref.labelStyle,\n    customColor = _ref.color,\n    themeOverrides = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$backgroundColor = _ref2.backgroundColor,\n    backgroundColor = _ref2$backgroundColor === void 0 ? (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.primary : _ref2$backgroundColor,\n    restStyle = _objectWithoutProperties(_ref2, _excluded2);\n  var textColor = customColor != null ? customColor : getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  var _useWindowDimensions = useWindowDimensions(),\n    fontScale = _useWindowDimensions.fontScale;\n  return React.createElement(View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: backgroundColor\n    }, styles.container, restStyle]\n  }, rest), React.createElement(Text, {\n    style: [styles.text, {\n      color: textColor,\n      fontSize: size / 2,\n      lineHeight: size / fontScale\n    }, labelStyle],\n    numberOfLines: 1\n  }, label));\n};\nAvatarText.displayName = 'Avatar.Text';\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\nexport default AvatarText;","map":{"version":3,"sources":["AvatarText.tsx"],"names":["React","useInternalTheme","white","getContrastingColor","Text","defaultSize","AvatarText","label","size","style","labelStyle","color","customColor","theme","themeOverrides","rest","backgroundColor","colors","primary","restStyle","StyleSheet","flatten","textColor","fontScale","useWindowDimensions","width","height","borderRadius","styles","container","text","fontSize","lineHeight","displayName","create","justifyContent","alignItems","textAlign","textAlignVertical"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAA,UAAA;AAAA,OAAA,mBAAA;AAAA,OAAA,IAAA;AAU9B,SAASC,gBAAgB;AACzB,SAASC,KAAK;AAEd,OAAOC,mBAAmB;AAC1B,OAAOC,IAAI;AAEX,IAAMC,WAAW,GAAG,EAAE;AAgDtB,IAAMC,UAAU,GAAG,SAAbA,UAAU,CAAG,IAAA,EAQN;EAAA,IAAA,aAAA;EARO,IAClBC,KAAK,GAOC,IAAA,CAPNA,KAAK;IAAA,SAAA,GAOC,IAAA,CANNC,IAAI;IAAJA,IAAI,GAAA,SAAA,cAAGH,WAAW,GAAA,SAAA;IAClBI,KAAK,GAKC,IAAA,CALNA,KAAK;IACLC,UAAU,GAIJ,IAAA,CAJNA,UAAU;IACHE,WAAW,GAGZ,IAAA,CAHND,KAAK;IACEG,cAAc,GAEf,IAAA,CAFND,KAAK;IACFE,IAAAA,GAAAA,wBAAAA,CACG,IAAA,EAAA,SAAA;EACN,IAAMF,KAAK,GAAGZ,gBAAgB,CAACa,cAAc,CAAC;EAC9C,IAAA,KAAA,GACEM,UAAU,CAACC,OAAO,CAACZ,KAAK,CAAC,IAAI,CAAC,CAAC;IAAA,qBAAA,GAAA,KAAA,CADzBO,eAAe;IAAfA,eAAe,GAAA,qBAAA,cAAA,CAAA,aAAA,GAAGH,KAAK,CAACI,MAAM,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZJ,aAAAA,CAAcK,OAAO,GAAA,qBAAA;IAAKC,SAAAA,GAAAA,wBAAAA,CAAAA,KAAAA,EAAAA,UAAAA;EAEpD,IAAMG,SAAS,GACbV,WAAW,WAAXA,WAAW,GACXT,mBAAmB,CAACa,eAAe,EAAEd,KAAK,EAAE,oBAAoB,CAAC;EACnE,IAAA,oBAAA,GAAsBsB,mBAAmB,EAAE;IAAnCD,SAAAA,GAAAA,oBAAAA,CAAAA,SAAAA;EAER,OACE,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA,QAAA,CAAA;IACH,KAAK,EAAE,CACL;MACEE,KAAK,EAAEjB,IAAI;MACXkB,MAAM,EAAElB,IAAI;MACZmB,YAAY,EAAEnB,IAAI,GAAG,CAAC;MACtBQ,eAAAA,EAAAA;IACF,CAAC,EACDY,MAAM,CAACC,SAAS,EAChBV,SAAS;EACT,CAAA,EACEJ,IAAI,CAAA,EAER,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA;IACH,KAAK,EAAE,CACLa,MAAM,CAACE,IAAI,EACX;MACEnB,KAAK,EAAEW,SAAS;MAChBS,QAAQ,EAAEvB,IAAI,GAAG,CAAC;MAClBwB,UAAU,EAAExB,IAAI,GAAGe;IACrB,CAAC,EACDb,UAAU,CACV;IACF,aAAa,EAAE;EAAE,CAAA,EAEhBH,KAAK,CACD,CACF;AAEX,CAAC;AAEDD,UAAU,CAAC2B,WAAW,GAAG,aAAa;AAEtC,IAAML,MAAM,GAAGR,UAAU,CAACc,MAAM,CAAC;EAC/BL,SAAS,EAAE;IACTM,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EACDN,IAAI,EAAE;IACJO,SAAS,EAAE,QAAQ;IACnBC,iBAAiB,EAAE;EACrB;AACF,CAAC,CAAC;AAEF,eAAehC,UAAU","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { StyleSheet, useWindowDimensions, View } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport Text from '../Typography/Text';\nconst defaultSize = 64;\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nconst AvatarText = _ref => {\n  var _theme$colors;\n  let {\n    label,\n    size = defaultSize,\n    style,\n    labelStyle,\n    color: customColor,\n    theme: themeOverrides,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    backgroundColor = (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.primary,\n    ...restStyle\n  } = StyleSheet.flatten(style) || {};\n  const textColor = customColor ?? getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  const {\n    fontScale\n  } = useWindowDimensions();\n  return /*#__PURE__*/React.createElement(View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor\n    }, styles.container, restStyle]\n  }, rest), /*#__PURE__*/React.createElement(Text, {\n    style: [styles.text, {\n      color: textColor,\n      fontSize: size / 2,\n      lineHeight: size / fontScale\n    }, labelStyle],\n    numberOfLines: 1\n  }, label));\n};\nAvatarText.displayName = 'Avatar.Text';\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\nexport default AvatarText;\n//# sourceMappingURL=AvatarText.js.map"]},"metadata":{},"sourceType":"module"}