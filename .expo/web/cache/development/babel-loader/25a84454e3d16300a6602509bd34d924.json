{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"mode\", \"dense\", \"disabled\", \"error\", \"multiline\", \"editable\", \"contentStyle\", \"render\", \"theme\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { forwardRef } from \"../../utils/forwardRef\";\nimport { roundLayoutSize } from \"../../utils/roundLayoutSize\";\nimport TextInputAffix from \"./Adornment/TextInputAffix\";\nimport TextInputIcon from \"./Adornment/TextInputIcon\";\nimport TextInputFlat from \"./TextInputFlat\";\nimport TextInputOutlined from \"./TextInputOutlined\";\nvar BLUR_ANIMATION_DURATION = 180;\nvar FOCUS_ANIMATION_DURATION = 150;\nvar TextInput = forwardRef(function (_ref, ref) {\n  var _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n    _ref$dense = _ref.dense,\n    dense = _ref$dense === void 0 ? false : _ref$dense,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    _ref$error = _ref.error,\n    errorProp = _ref$error === void 0 ? false : _ref$error,\n    _ref$multiline = _ref.multiline,\n    multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n    _ref$editable = _ref.editable,\n    editable = _ref$editable === void 0 ? true : _ref$editable,\n    contentStyle = _ref.contentStyle,\n    _ref$render = _ref.render,\n    render = _ref$render === void 0 ? function (props) {\n      return React.createElement(NativeTextInput, props);\n    } : _ref$render,\n    themeOverrides = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var isControlled = rest.value !== undefined;\n  var validInputValue = isControlled ? rest.value : rest.defaultValue;\n  var _React$useRef = React.useRef(new Animated.Value(validInputValue ? 0 : 1)),\n    labeled = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new Animated.Value(errorProp ? 1 : 0)),\n    error = _React$useRef2.current;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    focused = _React$useState2[0],\n    setFocused = _React$useState2[1];\n  var _React$useState3 = React.useState(' '),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    placeholder = _React$useState4[0],\n    setPlaceholder = _React$useState4[1];\n  var _React$useState5 = React.useState(validInputValue),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    uncontrolledValue = _React$useState6[0],\n    setUncontrolledValue = _React$useState6[1];\n  var value = isControlled ? rest.value : uncontrolledValue;\n  var _React$useState7 = React.useState({\n      measured: false,\n      width: 0,\n      height: 0\n    }),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    labelLayout = _React$useState8[0],\n    setLabelLayout = _React$useState8[1];\n  var _React$useState9 = React.useState({\n      width: null,\n      height: null\n    }),\n    _React$useState10 = _slicedToArray(_React$useState9, 2),\n    leftLayout = _React$useState10[0],\n    setLeftLayout = _React$useState10[1];\n  var _React$useState11 = React.useState({\n      width: null,\n      height: null\n    }),\n    _React$useState12 = _slicedToArray(_React$useState11, 2),\n    rightLayout = _React$useState12[0],\n    setRightLayout = _React$useState12[1];\n  var timer = React.useRef();\n  var root = React.useRef();\n  var scale = theme.animation.scale;\n  React.useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        var _root$current;\n        return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.focus();\n      },\n      clear: function clear() {\n        var _root$current2;\n        return (_root$current2 = root.current) === null || _root$current2 === void 0 ? void 0 : _root$current2.clear();\n      },\n      setNativeProps: function setNativeProps(args) {\n        var _root$current3;\n        return (_root$current3 = root.current) === null || _root$current3 === void 0 ? void 0 : _root$current3.setNativeProps(args);\n      },\n      isFocused: function isFocused() {\n        var _root$current4;\n        return ((_root$current4 = root.current) === null || _root$current4 === void 0 ? void 0 : _root$current4.isFocused()) || false;\n      },\n      blur: function blur() {\n        var _root$current5;\n        return (_root$current5 = root.current) === null || _root$current5 === void 0 ? void 0 : _root$current5.blur();\n      },\n      forceFocus: function forceFocus() {\n        var _root$current6;\n        return (_root$current6 = root.current) === null || _root$current6 === void 0 ? void 0 : _root$current6.focus();\n      }\n    };\n  });\n  React.useEffect(function () {\n    if (errorProp) {\n      Animated.timing(error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      {\n        Animated.timing(error, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, [errorProp, scale, error]);\n  React.useEffect(function () {\n    if (focused || !rest.label) {\n      if (rest.placeholder) {\n        timer.current = setTimeout(function () {\n          return setPlaceholder(rest.placeholder);\n        }, 50);\n      }\n    } else {\n      setPlaceholder(' ');\n    }\n    return function () {\n      if (timer.current) {\n        clearTimeout(timer.current);\n      }\n    };\n  }, [focused, rest.label, rest.placeholder]);\n  React.useEffect(function () {\n    labeled.stopAnimation();\n    if (value || focused) {\n      Animated.timing(labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.timing(labeled, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [focused, value, labeled, scale]);\n  var onLeftAffixLayoutChange = function onLeftAffixLayoutChange(event) {\n    var height = roundLayoutSize(event.nativeEvent.layout.height);\n    var width = roundLayoutSize(event.nativeEvent.layout.width);\n    if (width !== leftLayout.width || height !== leftLayout.height) {\n      setLeftLayout({\n        width: width,\n        height: height\n      });\n    }\n  };\n  var onRightAffixLayoutChange = function onRightAffixLayoutChange(event) {\n    var width = roundLayoutSize(event.nativeEvent.layout.width);\n    var height = roundLayoutSize(event.nativeEvent.layout.height);\n    if (width !== rightLayout.width || height !== rightLayout.height) {\n      setRightLayout({\n        width: width,\n        height: height\n      });\n    }\n  };\n  var handleFocus = function handleFocus(args) {\n    var _rest$onFocus;\n    if (disabled || !editable) {\n      return;\n    }\n    setFocused(true);\n    (_rest$onFocus = rest.onFocus) === null || _rest$onFocus === void 0 ? void 0 : _rest$onFocus.call(rest, args);\n  };\n  var handleBlur = function handleBlur(args) {\n    var _rest$onBlur;\n    if (!editable) {\n      return;\n    }\n    setFocused(false);\n    (_rest$onBlur = rest.onBlur) === null || _rest$onBlur === void 0 ? void 0 : _rest$onBlur.call(rest, args);\n  };\n  var handleChangeText = function handleChangeText(value) {\n    var _rest$onChangeText;\n    if (!editable || disabled) {\n      return;\n    }\n    if (!isControlled) {\n      setUncontrolledValue(value);\n    }\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, value);\n  };\n  var handleLayoutAnimatedText = function handleLayoutAnimatedText(e) {\n    var width = roundLayoutSize(e.nativeEvent.layout.width);\n    var height = roundLayoutSize(e.nativeEvent.layout.height);\n    if (width !== labelLayout.width || height !== labelLayout.height) {\n      setLabelLayout({\n        width: width,\n        height: height,\n        measured: true\n      });\n    }\n  };\n  var forceFocus = function forceFocus() {\n    var _root$current7;\n    return (_root$current7 = root.current) === null || _root$current7 === void 0 ? void 0 : _root$current7.focus();\n  };\n  var _rest$maxFontSizeMult = rest.maxFontSizeMultiplier,\n    maxFontSizeMultiplier = _rest$maxFontSizeMult === void 0 ? 1.5 : _rest$maxFontSizeMult;\n  if (mode === 'outlined') {\n    return React.createElement(TextInputOutlined, _extends({\n      dense: dense,\n      disabled: disabled,\n      error: errorProp,\n      multiline: multiline,\n      editable: editable,\n      render: render\n    }, rest, {\n      theme: theme,\n      value: value,\n      parentState: {\n        labeled: labeled,\n        error: error,\n        focused: focused,\n        placeholder: placeholder,\n        value: value,\n        labelLayout: labelLayout,\n        leftLayout: leftLayout,\n        rightLayout: rightLayout\n      },\n      innerRef: function innerRef(ref) {\n        root.current = ref;\n      },\n      onFocus: handleFocus,\n      forceFocus: forceFocus,\n      onBlur: handleBlur,\n      onChangeText: handleChangeText,\n      onLayoutAnimatedText: handleLayoutAnimatedText,\n      onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n      onRightAffixLayoutChange: onRightAffixLayoutChange,\n      maxFontSizeMultiplier: maxFontSizeMultiplier,\n      contentStyle: contentStyle\n    }));\n  }\n  return React.createElement(TextInputFlat, _extends({\n    dense: dense,\n    disabled: disabled,\n    error: errorProp,\n    multiline: multiline,\n    editable: editable,\n    render: render\n  }, rest, {\n    theme: theme,\n    value: value,\n    parentState: {\n      labeled: labeled,\n      error: error,\n      focused: focused,\n      placeholder: placeholder,\n      value: value,\n      labelLayout: labelLayout,\n      leftLayout: leftLayout,\n      rightLayout: rightLayout\n    },\n    innerRef: function innerRef(ref) {\n      root.current = ref;\n    },\n    onFocus: handleFocus,\n    forceFocus: forceFocus,\n    onBlur: handleBlur,\n    onChangeText: handleChangeText,\n    onLayoutAnimatedText: handleLayoutAnimatedText,\n    onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n    onRightAffixLayoutChange: onRightAffixLayoutChange,\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    contentStyle: contentStyle\n  }));\n});\nTextInput.Icon = TextInputIcon;\nTextInput.Affix = TextInputAffix;\nexport default TextInput;","map":{"version":3,"sources":["TextInput.tsx"],"names":["React","useInternalTheme","forwardRef","roundLayoutSize","TextInputAffix","TextInputIcon","TextInputFlat","TextInputOutlined","BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","TextInput","mode","dense","disabled","error","errorProp","multiline","editable","contentStyle","render","props","theme","themeOverrides","rest","ref","isControlled","value","undefined","validInputValue","defaultValue","current","labeled","useRef","Animated","Value","focused","setFocused","useState","placeholder","setPlaceholder","uncontrolledValue","setUncontrolledValue","labelLayout","setLabelLayout","measured","width","height","leftLayout","setLeftLayout","rightLayout","setRightLayout","timer","root","scale","animation","useImperativeHandle","focus","clear","setNativeProps","args","isFocused","blur","forceFocus","useEffect","timing","toValue","duration","useNativeDriver","start","label","setTimeout","clearTimeout","stopAnimation","onLeftAffixLayoutChange","event","nativeEvent","layout","onRightAffixLayoutChange","handleFocus","onFocus","handleBlur","onBlur","handleChangeText","onChangeText","handleLayoutAnimatedText","e","maxFontSizeMultiplier","Icon","Affix"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAA,QAAA;AAAA,OAAA,eAAA;AAU9B,SAASC,gBAAgB;AAEzB,SAASC,UAAU;AACnB,SAASC,eAAe;AACxB,OAAOC,cAAc;AAGrB,OAAOC,aAAa;AAGpB,OAAOC,aAAa;AACpB,OAAOC,iBAAiB;AAGxB,IAAMC,uBAAuB,GAAG,GAAG;AACnC,IAAMC,wBAAwB,GAAG,GAAG;AAuMpC,IAAMC,SAAS,GAAGR,UAAU,CAC1B,UAAA,IAAA,EAaEsB,GAAG,EACA;EAbH,IAAA,SAAA,GAWQ,IAAA,CAVNb,IAAI;IAAJA,IAAI,GAAA,SAAA,cAAG,MAAM,GAAA,SAAA;IAAA,UAAA,GAUP,IAAA,CATNC,KAAK;IAALA,KAAK,GAAA,UAAA,cAAG,KAAK,GAAA,UAAA;IAAA,aAAA,GASP,IAAA,CARNC,QAAQ;IAARA,QAAQ,GAAA,aAAA,cAAG,KAAK,GAAA,aAAA;IAAA,UAAA,GAQV,IAAA,CAPNC,KAAK;IAAEC,SAAS,GAAA,UAAA,cAAG,KAAK,GAAA,UAAA;IAAA,cAAA,GAOlB,IAAA,CANNC,SAAS;IAATA,SAAS,GAAA,cAAA,cAAG,KAAK,GAAA,cAAA;IAAA,aAAA,GAMX,IAAA,CALNC,QAAQ;IAARA,QAAQ,GAAA,aAAA,cAAG,IAAI,GAAA,aAAA;IACfC,YAAY,GAIN,IAAA,CAJNA,YAAY;IAAA,WAAA,GAIN,IAAA,CAHNC,MAAM;IAANA,MAAM,GAAA,WAAA,cAAIC,UAAAA,KAAkB;MAAA,OAAK,KAAA,CAAA,aAAA,CAAC,eAAe,EAAKA,KAAK,CAAI;IAAA,IAAA,WAAA;IACxDE,cAAc,GAEf,IAAA,CAFND,KAAK;IACFE,IAAAA,GAAAA,wBAAAA,CACG,IAAA,EAAA,SAAA;EAGR,IAAMF,KAAK,GAAGpB,gBAAgB,CAACqB,cAAc,CAAC;EAC9C,IAAMG,YAAY,GAAGF,IAAI,CAACG,KAAK,KAAKC,SAAS;EAC7C,IAAMC,eAAe,GAAGH,YAAY,GAAGF,IAAI,CAACG,KAAK,GAAGH,IAAI,CAACM,YAAY;EAErE,IAAA,aAAA,GAA6B7B,KAAK,CAACgC,MAAM,CACvC,IAAIC,QAAQ,CAACC,KAAK,CAACN,eAAe,GAAG,CAAC,GAAG,CAAC,CAAC,CAC5C;IAFgBG,OAAAA,GAAAA,aAAAA,CAATD,OAAO;EAGf,IAAA,cAAA,GAA2B9B,KAAK,CAACgC,MAAM,CACrC,IAAIC,QAAQ,CAACC,KAAK,CAACnB,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,CACtC;IAFgBD,KAAAA,GAAAA,cAAAA,CAATgB,OAAO;EAGf,IAAA,eAAA,GAA8B9B,KAAK,CAACqC,QAAQ,CAAU,KAAK,CAAC;IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA;IAArDF,OAAO,GAAA,gBAAA;IAAEC,UAAU,GAAA,gBAAA;EAC1B,IAAA,gBAAA,GAAsCpC,KAAK,CAACqC,QAAQ,CAClD,GAAG,CACJ;IAAA,gBAAA,GAAA,cAAA,CAAA,gBAAA;IAFMC,WAAW,GAAA,gBAAA;IAAEC,cAAc,GAAA,gBAAA;EAGlC,IAAA,gBAAA,GAAkDvC,KAAK,CAACqC,QAAQ,CAE9DT,eAAe,CAAC;IAAA,gBAAA,GAAA,cAAA,CAAA,gBAAA;IAFXY,iBAAiB,GAAA,gBAAA;IAAEC,oBAAoB,GAAA,gBAAA;EAI9C,IAAMf,KAAK,GAAGD,YAAY,GAAGF,IAAI,CAACG,KAAK,GAAGc,iBAAiB;EAE3D,IAAA,gBAAA,GAAsCxC,KAAK,CAACqC,QAAQ,CAIjD;MACDO,QAAQ,EAAE,KAAK;MACfC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE;IACV,CAAC,CAAC;IAAA,gBAAA,GAAA,cAAA,CAAA,gBAAA;IARKJ,WAAW,GAAA,gBAAA;IAAEC,cAAc,GAAA,gBAAA;EASlC,IAAA,gBAAA,GAAoC3C,KAAK,CAACqC,QAAQ,CAG/C;MACDQ,KAAK,EAAE,IAAI;MACXC,MAAM,EAAE;IACV,CAAC,CAAC;IAAA,iBAAA,GAAA,cAAA,CAAA,gBAAA;IANKC,UAAU,GAAA,iBAAA;IAAEC,aAAa,GAAA,iBAAA;EAOhC,IAAA,iBAAA,GAAsChD,KAAK,CAACqC,QAAQ,CAGjD;MACDQ,KAAK,EAAE,IAAI;MACXC,MAAM,EAAE;IACV,CAAC,CAAC;IAAA,iBAAA,GAAA,cAAA,CAAA,iBAAA;IANKG,WAAW,GAAA,iBAAA;IAAEC,cAAc,GAAA,iBAAA;EAQlC,IAAMC,KAAK,GAAGnD,KAAK,CAACgC,MAAM,EAA8B;EAExD,IAAMoB,IAAI,GAAGpD,KAAK,CAACgC,MAAM,EAAsC;EAE/D,IAAQqB,KAAAA,GAAUhC,KAAK,CAACiC,SAAS,CAAzBD,KAAAA;EAERrD,KAAK,CAACuD,mBAAmB,CAAC/B,GAAG,EAAE;IAAA,OAAO;MACpCgC,KAAK,EAAE,SAAA,MAAA,EAAA;QAAA,IAAA,aAAA;QAAA,OAAA,CAAA,aAAA,GAAMJ,IAAI,CAACtB,OAAO,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZsB,aAAAA,CAAcI,KAAK,EAAE;MAAA,CAAA;MAClCC,KAAK,EAAE,SAAA,MAAA,EAAA;QAAA,IAAA,cAAA;QAAA,OAAA,CAAA,cAAA,GAAML,IAAI,CAACtB,OAAO,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZsB,cAAAA,CAAcK,KAAK,EAAE;MAAA,CAAA;MAClCC,cAAc,EAAGC,SAAAA,eAAAA,IAAY,EAAA;QAAA,IAAA,cAAA;QAAA,OAAA,CAAA,cAAA,GAAKP,IAAI,CAACtB,OAAO,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZsB,cAAAA,CAAcM,cAAc,CAACC,IAAI,CAAC;MAAA,CAAA;MACpEC,SAAS,EAAE,SAAA,UAAA,EAAA;QAAA,IAAA,cAAA;QAAA,OAAM,CAAA,CAAA,cAAA,GAAA,IAAI,CAAC9B,OAAO,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZ,cAAA,CAAc8B,SAAS,EAAE,KAAI,KAAK;MAAA,CAAA;MACnDC,IAAI,EAAE,SAAA,KAAA,EAAA;QAAA,IAAA,cAAA;QAAA,OAAA,CAAA,cAAA,GAAMT,IAAI,CAACtB,OAAO,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZsB,cAAAA,CAAcS,IAAI,EAAE;MAAA,CAAA;MAChCC,UAAU,EAAE,SAAA,WAAA,EAAA;QAAA,IAAA,cAAA;QAAA,OAAA,CAAA,cAAA,GAAMV,IAAI,CAACtB,OAAO,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZsB,cAAAA,CAAcI,KAAK,EAAE;MAAA;IACzC,CAAC;EAAA,CAAC,CAAC;EAEHxD,KAAK,CAAC+D,SAAS,CAAC,YAAM;IAEpB,IAAIhD,SAAS,EAAE;MAEbkB,QAAQ,CAAC+B,MAAM,CAAClD,KAAK,EAAE;QACrBmD,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAEzD,wBAAwB,GAAG4C,KAAK;QAE1Cc,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,EAAE;IACZ,CAAC,MAAM;MAEL;QACEnC,QAAQ,CAAC+B,MAAM,CAAClD,KAAK,EAAE;UACrBmD,OAAO,EAAE,CAAC;UACVC,QAAQ,EAAE1D,uBAAuB,GAAG6C,KAAK;UAEzCc,eAAe,EAAE;QACnB,CAAC,CAAC,CAACC,KAAK,EAAE;MACZ;IACF;EACF,CAAC,EAAE,CAACrD,SAAS,EAAEsC,KAAK,EAAEvC,KAAK,CAAC,CAAC;EAE7Bd,KAAK,CAAC+D,SAAS,CAAC,YAAM;IAIpB,IAAI5B,OAAO,IAAI,CAACZ,IAAI,CAAC8C,KAAK,EAAE;MAG1B,IAAI9C,IAAI,CAACe,WAAW,EAAE;QAGpBa,KAAK,CAACrB,OAAO,GAAGwC,UAAU,CACxB;UAAA,OAAM/B,cAAc,CAAChB,IAAI,CAACe,WAAW,CAAC;QAAA,GACtC,EAAE,CAC0B;MAChC;IACF,CAAC,MAAM;MAULC,cAAc,CAAC,GAAG,CAAC;IACrB;IAEA,OAAO,YAAM;MACX,IAAIY,KAAK,CAACrB,OAAO,EAAE;QACjByC,YAAY,CAACpB,KAAK,CAACrB,OAAO,CAAC;MAC7B;IACF,CAAC;EACH,CAAC,EAAE,CAACK,OAAO,EAAEZ,IAAI,CAAC8C,KAAK,EAAE9C,IAAI,CAACe,WAAW,CAAC,CAAC;EAE3CtC,KAAK,CAAC+D,SAAS,CAAC,YAAM;IACpBhC,OAAO,CAACyC,aAAa,EAAE;IAKvB,IAAI9C,KAAK,IAAIS,OAAO,EAAE;MAEpBF,QAAQ,CAAC+B,MAAM,CAACjC,OAAO,EAAE;QACvBkC,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAE1D,uBAAuB,GAAG6C,KAAK;QAEzCc,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,EAAE;IACZ,CAAC,MAAM;MAELnC,QAAQ,CAAC+B,MAAM,CAACjC,OAAO,EAAE;QACvBkC,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAEzD,wBAAwB,GAAG4C,KAAK;QAE1Cc,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,EAAE;IACZ;EACF,CAAC,EAAE,CAACjC,OAAO,EAAET,KAAK,EAAEK,OAAO,EAAEsB,KAAK,CAAC,CAAC;EAEpC,IAAMoB,uBAAuB,GAAIC,SAA3BD,uBAAuB,CAAIC,KAAwB,EAAK;IAC5D,IAAM5B,MAAM,GAAG3C,eAAe,CAACuE,KAAK,CAACC,WAAW,CAACC,MAAM,CAAC9B,MAAM,CAAC;IAC/D,IAAMD,KAAK,GAAG1C,eAAe,CAACuE,KAAK,CAACC,WAAW,CAACC,MAAM,CAAC/B,KAAK,CAAC;IAE7D,IAAIA,KAAK,KAAKE,UAAU,CAACF,KAAK,IAAIC,MAAM,KAAKC,UAAU,CAACD,MAAM,EAAE;MAC9DE,aAAa,CAAC;QACZH,KAAK,EAALA,KAAK;QACLC,MAAAA,EAAAA;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EAED,IAAM+B,wBAAwB,GAAIH,SAA5BG,wBAAwB,CAAIH,KAAwB,EAAK;IAC7D,IAAM7B,KAAK,GAAG1C,eAAe,CAACuE,KAAK,CAACC,WAAW,CAACC,MAAM,CAAC/B,KAAK,CAAC;IAC7D,IAAMC,MAAM,GAAG3C,eAAe,CAACuE,KAAK,CAACC,WAAW,CAACC,MAAM,CAAC9B,MAAM,CAAC;IAE/D,IAAID,KAAK,KAAKI,WAAW,CAACJ,KAAK,IAAIC,MAAM,KAAKG,WAAW,CAACH,MAAM,EAAE;MAChEI,cAAc,CAAC;QACbL,KAAK,EAALA,KAAK;QACLC,MAAAA,EAAAA;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EAED,IAAMgC,WAAW,GAAInB,SAAfmB,WAAW,CAAInB,IAAS,EAAK;IAAA,IAAA,aAAA;IACjC,IAAI9C,QAAQ,IAAI,CAACI,QAAQ,EAAE;MACzB;IACF;IAEAmB,UAAU,CAAC,IAAI,CAAC;IAEhB,CAAA,aAAA,GAAA,IAAI,CAAC2C,OAAO,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZ,aAAA,CAAA,IAAA,CAAA,IAAI,EAAWpB,IAAI,CAAC;EACtB,CAAC;EAED,IAAMqB,UAAU,GAAIrB,SAAdqB,UAAU,CAAIrB,IAAY,EAAK;IAAA,IAAA,YAAA;IACnC,IAAI,CAAC1C,QAAQ,EAAE;MACb;IACF;IAEAmB,UAAU,CAAC,KAAK,CAAC;IACjB,CAAA,YAAA,GAAA,IAAI,CAAC6C,MAAM,MAAA,IAAA,IAAA,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAX,YAAA,CAAA,IAAA,CAAA,IAAI,EAAUtB,IAAI,CAAC;EACrB,CAAC;EAED,IAAMuB,gBAAgB,GAAIxD,SAApBwD,gBAAgB,CAAIxD,KAAa,EAAK;IAAA,IAAA,kBAAA;IAC1C,IAAI,CAACT,QAAQ,IAAIJ,QAAQ,EAAE;MACzB;IACF;IAEA,IAAI,CAACY,YAAY,EAAE;MAEjBgB,oBAAoB,CAACf,KAAK,CAAC;IAC7B;IACA,CAAA,kBAAA,GAAA,IAAI,CAACyD,YAAY,MAAA,IAAA,IAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAjB,kBAAA,CAAA,IAAA,CAAA,IAAI,EAAgBzD,KAAK,CAAC;EAC5B,CAAC;EAED,IAAM0D,wBAAwB,GAAIC,SAA5BD,wBAAwB,CAAIC,CAAoB,EAAK;IACzD,IAAMxC,KAAK,GAAG1C,eAAe,CAACkF,CAAC,CAACV,WAAW,CAACC,MAAM,CAAC/B,KAAK,CAAC;IACzD,IAAMC,MAAM,GAAG3C,eAAe,CAACkF,CAAC,CAACV,WAAW,CAACC,MAAM,CAAC9B,MAAM,CAAC;IAE3D,IAAID,KAAK,KAAKH,WAAW,CAACG,KAAK,IAAIC,MAAM,KAAKJ,WAAW,CAACI,MAAM,EAAE;MAChEH,cAAc,CAAC;QACbE,KAAK,EAALA,KAAK;QACLC,MAAM,EAANA,MAAM;QACNF,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF,CAAC;EACD,IAAMkB,UAAU,GAAG,SAAbA,UAAU,CAAA,EAAG;IAAA,IAAA,cAAA;IAAA,OAAA,CAAA,cAAA,GAAMV,IAAI,CAACtB,OAAO,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZsB,cAAAA,CAAcI,KAAK,EAAE;EAAA,CAAA;EAE9C,IAAA,qBAAA,GAAwCjC,IAAI,CAApC+D,qBAAqB;IAArBA,qBAAqB,GAAA,qBAAA,cAAG,GAAA,GAAA,qBAAA;EAEhC,IAAI3E,IAAI,KAAK,UAAU,EAAE;IACvB,OACE,KAAA,CAAA,aAAA,CAAC,iBAAiB,EAAA,QAAA,CAAA;MAChB,KAAK,EAAEC,KAAM;MACb,QAAQ,EAAEC,QAAS;MACnB,KAAK,EAAEE,SAAU;MACjB,SAAS,EAAEC,SAAU;MACrB,QAAQ,EAAEC,QAAS;MACnB,MAAM,EAAEE;IAAO,CAAA,EACXI,IAAI,EAAA;MACR,KAAK,EAAEF,KAAM;MACb,KAAK,EAAEK,KAAM;MACb,WAAW,EAAE;QACXK,OAAO,EAAPA,OAAO;QACPjB,KAAK,EAALA,KAAK;QACLqB,OAAO,EAAPA,OAAO;QACPG,WAAW,EAAXA,WAAW;QACXZ,KAAK,EAALA,KAAK;QACLgB,WAAW,EAAXA,WAAW;QACXK,UAAU,EAAVA,UAAU;QACVE,WAAAA,EAAAA;MACF,CAAE;MACF,QAAQ,EAAGzB,SAAAA,SAAAA,GAAG,EAAK;QACjB4B,IAAI,CAACtB,OAAO,GAAGN,GAAG;MACpB,CAAE;MACF,OAAO,EAAEsD,WAAY;MACrB,UAAU,EAAEhB,UAAW;MACvB,MAAM,EAAEkB,UAAW;MACnB,YAAY,EAAEE,gBAAiB;MAC/B,oBAAoB,EAAEE,wBAAyB;MAC/C,uBAAuB,EAAEX,uBAAwB;MACjD,wBAAwB,EAAEI,wBAAyB;MACnD,qBAAqB,EAAES,qBAAsB;MAC7C,YAAY,EAAEpE;IAAa,CAAA,CAAA,CAC3B;EAEN;EAEA,OACE,KAAA,CAAA,aAAA,CAAC,aAAa,EAAA,QAAA,CAAA;IACZ,KAAK,EAAEN,KAAM;IACb,QAAQ,EAAEC,QAAS;IACnB,KAAK,EAAEE,SAAU;IACjB,SAAS,EAAEC,SAAU;IACrB,QAAQ,EAAEC,QAAS;IACnB,MAAM,EAAEE;EAAO,CAAA,EACXI,IAAI,EAAA;IACR,KAAK,EAAEF,KAAM;IACb,KAAK,EAAEK,KAAM;IACb,WAAW,EAAE;MACXK,OAAO,EAAPA,OAAO;MACPjB,KAAK,EAALA,KAAK;MACLqB,OAAO,EAAPA,OAAO;MACPG,WAAW,EAAXA,WAAW;MACXZ,KAAK,EAALA,KAAK;MACLgB,WAAW,EAAXA,WAAW;MACXK,UAAU,EAAVA,UAAU;MACVE,WAAAA,EAAAA;IACF,CAAE;IACF,QAAQ,EAAGzB,SAAAA,SAAAA,GAAG,EAAK;MACjB4B,IAAI,CAACtB,OAAO,GAAGN,GAAG;IACpB,CAAE;IACF,OAAO,EAAEsD,WAAY;IACrB,UAAU,EAAEhB,UAAW;IACvB,MAAM,EAAEkB,UAAW;IACnB,YAAY,EAAEE,gBAAiB;IAC/B,oBAAoB,EAAEE,wBAAyB;IAC/C,uBAAuB,EAAEX,uBAAwB;IACjD,wBAAwB,EAAEI,wBAAyB;IACnD,qBAAqB,EAAES,qBAAsB;IAC7C,YAAY,EAAEpE;EAAa,CAAA,CAAA,CAC3B;AAEN,CAAC,CACqB;AAExBR,SAAS,CAAC6E,IAAI,GAAGlF,aAAa;AAI9BK,SAAS,CAAC8E,KAAK,GAAGpF,cAAc;AAEhC,eAAeM,SAAS","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { Animated, TextInput as NativeTextInput } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport { forwardRef } from '../../utils/forwardRef';\nimport { roundLayoutSize } from '../../utils/roundLayoutSize';\nimport TextInputAffix from './Adornment/TextInputAffix';\nimport TextInputIcon from './Adornment/TextInputIcon';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputOutlined from './TextInputOutlined';\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState(\"\");\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nconst TextInput = forwardRef((_ref, ref) => {\n  let {\n    mode = 'flat',\n    dense = false,\n    disabled = false,\n    error: errorProp = false,\n    multiline = false,\n    editable = true,\n    contentStyle,\n    render = props => /*#__PURE__*/React.createElement(NativeTextInput, props),\n    theme: themeOverrides,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const isControlled = rest.value !== undefined;\n  const validInputValue = isControlled ? rest.value : rest.defaultValue;\n  const {\n    current: labeled\n  } = React.useRef(new Animated.Value(validInputValue ? 0 : 1));\n  const {\n    current: error\n  } = React.useRef(new Animated.Value(errorProp ? 1 : 0));\n  const [focused, setFocused] = React.useState(false);\n  const [placeholder, setPlaceholder] = React.useState(' ');\n  const [uncontrolledValue, setUncontrolledValue] = React.useState(validInputValue);\n  // Use value from props instead of local state when input is controlled\n  const value = isControlled ? rest.value : uncontrolledValue;\n  const [labelLayout, setLabelLayout] = React.useState({\n    measured: false,\n    width: 0,\n    height: 0\n  });\n  const [leftLayout, setLeftLayout] = React.useState({\n    width: null,\n    height: null\n  });\n  const [rightLayout, setRightLayout] = React.useState({\n    width: null,\n    height: null\n  });\n  const timer = React.useRef();\n  const root = React.useRef();\n  const {\n    scale\n  } = theme.animation;\n  React.useImperativeHandle(ref, () => ({\n    focus: () => {\n      var _root$current;\n      return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.focus();\n    },\n    clear: () => {\n      var _root$current2;\n      return (_root$current2 = root.current) === null || _root$current2 === void 0 ? void 0 : _root$current2.clear();\n    },\n    setNativeProps: args => {\n      var _root$current3;\n      return (_root$current3 = root.current) === null || _root$current3 === void 0 ? void 0 : _root$current3.setNativeProps(args);\n    },\n    isFocused: () => {\n      var _root$current4;\n      return ((_root$current4 = root.current) === null || _root$current4 === void 0 ? void 0 : _root$current4.isFocused()) || false;\n    },\n    blur: () => {\n      var _root$current5;\n      return (_root$current5 = root.current) === null || _root$current5 === void 0 ? void 0 : _root$current5.blur();\n    },\n    forceFocus: () => {\n      var _root$current6;\n      return (_root$current6 = root.current) === null || _root$current6 === void 0 ? void 0 : _root$current6.focus();\n    }\n  }));\n  React.useEffect(() => {\n    // When the input has an error, we wiggle the label and apply error styles\n    if (errorProp) {\n      // show error\n      Animated.timing(error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n        useNativeDriver: true\n      }).start();\n    } else {\n      // hide error\n      {\n        Animated.timing(error, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, [errorProp, scale, error]);\n  React.useEffect(() => {\n    // Show placeholder text only if the input is focused, or there's no label\n    // We don't show placeholder if there's a label because the label acts as placeholder\n    // When focused, the label moves up, so we can show a placeholder\n    if (focused || !rest.label) {\n      // If the user wants to use the contextMenu, when changing the placeholder, the contextMenu is closed\n      // This is a workaround to mitigate this behavior in scenarios where the placeholder is not specified.\n      if (rest.placeholder) {\n        // Set the placeholder in a delay to offset the label animation\n        // If we show it immediately, they'll overlap and look ugly\n        timer.current = setTimeout(() => setPlaceholder(rest.placeholder), 50);\n      }\n    } else {\n      // hidePlaceholder\n\n      // Issue: https://github.com/callstack/react-native-paper/issues/3138\n      // Description:   Changing the placeholder text value dynamically,\n      //                within multiline input on iOS, doesn't work properly –\n      //                the placeholder is not displayed initially.\n      // Root cause:    Placeholder initial value, which has length 0.\n      // More context:  The issue was also reproduced in react-native, using its own TextInput.\n      // Workaround:    Set an empty space character in the default value.\n      setPlaceholder(' ');\n    }\n    return () => {\n      if (timer.current) {\n        clearTimeout(timer.current);\n      }\n    };\n  }, [focused, rest.label, rest.placeholder]);\n  React.useEffect(() => {\n    labeled.stopAnimation();\n    // The label should be minimized if the text input is focused, or has text\n    // In minimized mode, the label moves up and becomes small\n    // workaround for animated regression for react native > 0.61\n    // https://github.com/callstack/react-native-paper/pull/1440\n    if (value || focused) {\n      // minimize label\n      Animated.timing(labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n        useNativeDriver: true\n      }).start();\n    } else {\n      // restore label\n      Animated.timing(labeled, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n        useNativeDriver: true\n      }).start();\n    }\n  }, [focused, value, labeled, scale]);\n  const onLeftAffixLayoutChange = event => {\n    const height = roundLayoutSize(event.nativeEvent.layout.height);\n    const width = roundLayoutSize(event.nativeEvent.layout.width);\n    if (width !== leftLayout.width || height !== leftLayout.height) {\n      setLeftLayout({\n        width,\n        height\n      });\n    }\n  };\n  const onRightAffixLayoutChange = event => {\n    const width = roundLayoutSize(event.nativeEvent.layout.width);\n    const height = roundLayoutSize(event.nativeEvent.layout.height);\n    if (width !== rightLayout.width || height !== rightLayout.height) {\n      setRightLayout({\n        width,\n        height\n      });\n    }\n  };\n  const handleFocus = args => {\n    var _rest$onFocus;\n    if (disabled || !editable) {\n      return;\n    }\n    setFocused(true);\n    (_rest$onFocus = rest.onFocus) === null || _rest$onFocus === void 0 ? void 0 : _rest$onFocus.call(rest, args);\n  };\n  const handleBlur = args => {\n    var _rest$onBlur;\n    if (!editable) {\n      return;\n    }\n    setFocused(false);\n    (_rest$onBlur = rest.onBlur) === null || _rest$onBlur === void 0 ? void 0 : _rest$onBlur.call(rest, args);\n  };\n  const handleChangeText = value => {\n    var _rest$onChangeText;\n    if (!editable || disabled) {\n      return;\n    }\n    if (!isControlled) {\n      // Keep track of value in local state when input is not controlled\n      setUncontrolledValue(value);\n    }\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, value);\n  };\n  const handleLayoutAnimatedText = e => {\n    const width = roundLayoutSize(e.nativeEvent.layout.width);\n    const height = roundLayoutSize(e.nativeEvent.layout.height);\n    if (width !== labelLayout.width || height !== labelLayout.height) {\n      setLabelLayout({\n        width,\n        height,\n        measured: true\n      });\n    }\n  };\n  const forceFocus = () => {\n    var _root$current7;\n    return (_root$current7 = root.current) === null || _root$current7 === void 0 ? void 0 : _root$current7.focus();\n  };\n  const {\n    maxFontSizeMultiplier = 1.5\n  } = rest;\n  if (mode === 'outlined') {\n    return /*#__PURE__*/React.createElement(TextInputOutlined, _extends({\n      dense: dense,\n      disabled: disabled,\n      error: errorProp,\n      multiline: multiline,\n      editable: editable,\n      render: render\n    }, rest, {\n      theme: theme,\n      value: value,\n      parentState: {\n        labeled,\n        error,\n        focused,\n        placeholder,\n        value,\n        labelLayout,\n        leftLayout,\n        rightLayout\n      },\n      innerRef: ref => {\n        root.current = ref;\n      },\n      onFocus: handleFocus,\n      forceFocus: forceFocus,\n      onBlur: handleBlur,\n      onChangeText: handleChangeText,\n      onLayoutAnimatedText: handleLayoutAnimatedText,\n      onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n      onRightAffixLayoutChange: onRightAffixLayoutChange,\n      maxFontSizeMultiplier: maxFontSizeMultiplier,\n      contentStyle: contentStyle\n    }));\n  }\n  return /*#__PURE__*/React.createElement(TextInputFlat, _extends({\n    dense: dense,\n    disabled: disabled,\n    error: errorProp,\n    multiline: multiline,\n    editable: editable,\n    render: render\n  }, rest, {\n    theme: theme,\n    value: value,\n    parentState: {\n      labeled,\n      error,\n      focused,\n      placeholder,\n      value,\n      labelLayout,\n      leftLayout,\n      rightLayout\n    },\n    innerRef: ref => {\n      root.current = ref;\n    },\n    onFocus: handleFocus,\n    forceFocus: forceFocus,\n    onBlur: handleBlur,\n    onChangeText: handleChangeText,\n    onLayoutAnimatedText: handleLayoutAnimatedText,\n    onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n    onRightAffixLayoutChange: onRightAffixLayoutChange,\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    contentStyle: contentStyle\n  }));\n});\n// @component ./Adornment/TextInputIcon.tsx\nTextInput.Icon = TextInputIcon;\n\n// @component ./Adornment/TextInputAffix.tsx\n// @ts-ignore Types of property 'theme' are incompatible.\nTextInput.Affix = TextInputAffix;\nexport default TextInput;\n//# sourceMappingURL=TextInput.js.map"]},"metadata":{},"sourceType":"module"}