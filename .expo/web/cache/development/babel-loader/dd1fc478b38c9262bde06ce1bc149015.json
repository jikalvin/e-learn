{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { ApolloLink, HttpLink, from } from '@apollo/client';\nimport { getTokens, setTokens, tokenExpiryTime } from \"../util/tokens\";\nimport { getHost } from \"./getHost\";\nimport { setContext } from '@apollo/client/link/context';\nvar uri = getHost();\nvar httpLink = new HttpLink({\n  uri: uri\n});\nvar authLink = setContext(function () {\n  var _ref2 = _asyncToGenerator(function* (_, _ref) {\n    var headers = _ref.headers;\n    var _yield$getTokens = yield getTokens(),\n      accessToken = _yield$getTokens.accessToken,\n      refreshToken = _yield$getTokens.refreshToken;\n    if (accessToken && refreshToken) {\n      if (tokenExpiryTime(accessToken) > anHourFromNow()) return {\n          headers: _objectSpread(_objectSpread({}, headers), {}, {\n            'x-access-token': accessToken\n          })\n        };else if (tokenExpiryTime(refreshToken) > new Date()) return {\n          headers: _objectSpread(_objectSpread({}, headers), {}, {\n            'x-refresh-token': refreshToken\n          })\n        };\n    }\n    return {\n      headers: _objectSpread({}, headers)\n    };\n  });\n  return function (_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nvar afterwareLink = new ApolloLink(function (operation, forward) {\n  return forward(operation).map(function (response) {\n    var _context$response, _context$response$hea, _context$response2, _context$response2$he;\n    var context = operation.getContext();\n    var accessToken = context == null ? void 0 : (_context$response = context.response) == null ? void 0 : (_context$response$hea = _context$response.headers) == null ? void 0 : _context$response$hea.get('x-access-token');\n    var refreshToken = context == null ? void 0 : (_context$response2 = context.response) == null ? void 0 : (_context$response2$he = _context$response2.headers) == null ? void 0 : _context$response2$he.get('x-refresh-token');\n    if (accessToken || refreshToken) setTokens({\n      accessToken: accessToken,\n      refreshToken: refreshToken\n    });\n    if (typeof response !== 'object') console.error(\"Response is of type \" + typeof response + \", expected object\");\n    return response;\n  });\n});\nexport var link = from([authLink, afterwareLink, httpLink]);\nvar anHourFromNow = function anHourFromNow() {\n  var time = new Date();\n  time.setHours(time.getHours() + 1);\n  return time;\n};","map":{"version":3,"names":["ApolloLink","HttpLink","from","getTokens","setTokens","tokenExpiryTime","getHost","setContext","uri","httpLink","authLink","_ref2","_asyncToGenerator","_","_ref","headers","_yield$getTokens","accessToken","refreshToken","anHourFromNow","_objectSpread","Date","_x","_x2","apply","arguments","afterwareLink","operation","forward","map","response","_context$response","_context$response$hea","_context$response2","_context$response2$he","context","getContext","get","console","error","link","time","setHours","getHours"],"sources":["C:/Users/HP/Downloads/E-Learn/auth-demo/reactNativeApp/graphql/link.ts"],"sourcesContent":["import { ApolloLink, HttpLink, from } from '@apollo/client';\r\nimport { getTokens, setTokens, tokenExpiryTime } from '../util/tokens';\r\n\r\nimport { getHost } from './getHost';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nconst uri = getHost();\r\nconst httpLink = new HttpLink({ uri });\r\n\r\n// get the access and refresh tokens from AsyncStorage and use them to set the request headers\r\nconst authLink = setContext(async (_, { headers }) => {\r\n  let { accessToken, refreshToken } = await getTokens();\r\n  if (accessToken && refreshToken) {\r\n    if (tokenExpiryTime(accessToken) > anHourFromNow())\r\n      // access token expires at least an hour from now\r\n      return {\r\n        headers: { ...headers, 'x-access-token': accessToken },\r\n      };\r\n    else if (tokenExpiryTime(refreshToken) > new Date())\r\n      // refresh token is unexpired\r\n      return { headers: { ...headers, 'x-refresh-token': refreshToken } };\r\n  }\r\n  return { headers: { ...headers } }; // no unexpired tokens\r\n});\r\n\r\n// our Apollo server is regularly sending new access and refresh tokens in\r\n// the response headers. These need to be extracted and pushed to AsyncStorage\r\n// See https://zach.codes/access-response-headers-in-apollo-client/\r\n\r\nconst afterwareLink = new ApolloLink((operation, forward) => {\r\n  return forward(operation).map((response) => {\r\n    const context = operation.getContext();\r\n    const accessToken = context?.response?.headers?.get('x-access-token');\r\n    const refreshToken = context?.response?.headers?.get('x-refresh-token');\r\n    if (accessToken || refreshToken) setTokens({ accessToken, refreshToken });\r\n    if (typeof response !== 'object')\r\n      console.error(`Response is of type ${typeof response}, expected object`);\r\n    return response;\r\n  });\r\n});\r\n\r\n// see https://www.apollographql.com/docs/react/api/link/introduction/#additive-composition\r\nexport const link = from([authLink, afterwareLink, httpLink]);\r\n\r\nconst anHourFromNow = () => {\r\n  const time = new Date();\r\n  time.setHours(time.getHours() + 1);\r\n  return time;\r\n};\r\n"],"mappings":";;;;AAAA,SAASA,UAAU,EAAEC,QAAQ,EAAEC,IAAI,QAAQ,gBAAgB;AAC3D,SAASC,SAAS,EAAEC,SAAS,EAAEC,eAAe;AAE9C,SAASC,OAAO;AAChB,SAASC,UAAU,QAAQ,6BAA6B;AAExD,IAAMC,GAAG,GAAGF,OAAO,EAAE;AACrB,IAAMG,QAAQ,GAAG,IAAIR,QAAQ,CAAC;EAAEO,GAAG,EAAHA;AAAI,CAAC,CAAC;AAGtC,IAAME,QAAQ,GAAGH,UAAU;EAAA,IAAAI,KAAA,GAAAC,iBAAA,CAAC,WAAOC,CAAC,EAAAC,IAAA,EAAkB;IAAA,IAAdC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAC7C,IAAAC,gBAAA,SAA0Cb,SAAS,EAAE;MAA/Cc,WAAW,GAAAD,gBAAA,CAAXC,WAAW;MAAEC,YAAY,GAAAF,gBAAA,CAAZE,YAAY;IAC/B,IAAID,WAAW,IAAIC,YAAY,EAAE;MAC/B,IAAIb,eAAe,CAACY,WAAW,CAAC,GAAGE,aAAa,EAAE,EAEhD,OAAO;UACLJ,OAAO,EAAAK,aAAA,CAAAA,aAAA,KAAOL,OAAO;YAAE,gBAAgB,EAAEE;UAAW;QACtD,CAAC,CAAC,KACC,IAAIZ,eAAe,CAACa,YAAY,CAAC,GAAG,IAAIG,IAAI,EAAE,EAEjD,OAAO;UAAEN,OAAO,EAAAK,aAAA,CAAAA,aAAA,KAAOL,OAAO;YAAE,iBAAiB,EAAEG;UAAY;QAAG,CAAC;IACvE;IACA,OAAO;MAAEH,OAAO,EAAAK,aAAA,KAAOL,OAAO;IAAG,CAAC;EACpC,CAAC;EAAA,iBAAAO,EAAA,EAAAC,GAAA;IAAA,OAAAZ,KAAA,CAAAa,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAMF,IAAMC,aAAa,GAAG,IAAI1B,UAAU,CAAC,UAAC2B,SAAS,EAAEC,OAAO,EAAK;EAC3D,OAAOA,OAAO,CAACD,SAAS,CAAC,CAACE,GAAG,CAAC,UAACC,QAAQ,EAAK;IAAA,IAAAC,iBAAA,EAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA;IAC1C,IAAMC,OAAO,GAAGR,SAAS,CAACS,UAAU,EAAE;IACtC,IAAMnB,WAAW,GAAGkB,OAAO,qBAAAJ,iBAAA,GAAPI,OAAO,CAAEL,QAAQ,sBAAAE,qBAAA,GAAjBD,iBAAA,CAAmBhB,OAAO,qBAA1BiB,qBAAA,CAA4BK,GAAG,CAAC,gBAAgB,CAAC;IACrE,IAAMnB,YAAY,GAAGiB,OAAO,qBAAAF,kBAAA,GAAPE,OAAO,CAAEL,QAAQ,sBAAAI,qBAAA,GAAjBD,kBAAA,CAAmBlB,OAAO,qBAA1BmB,qBAAA,CAA4BG,GAAG,CAAC,iBAAiB,CAAC;IACvE,IAAIpB,WAAW,IAAIC,YAAY,EAAEd,SAAS,CAAC;MAAEa,WAAW,EAAXA,WAAW;MAAEC,YAAY,EAAZA;IAAa,CAAC,CAAC;IACzE,IAAI,OAAOY,QAAQ,KAAK,QAAQ,EAC9BQ,OAAO,CAACC,KAAK,0BAAwB,OAAOT,QAAQ,uBAAoB;IAC1E,OAAOA,QAAQ;EACjB,CAAC,CAAC;AACJ,CAAC,CAAC;AAGF,OAAO,IAAMU,IAAI,GAAGtC,IAAI,CAAC,CAACQ,QAAQ,EAAEgB,aAAa,EAAEjB,QAAQ,CAAC,CAAC;AAE7D,IAAMU,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;EAC1B,IAAMsB,IAAI,GAAG,IAAIpB,IAAI,EAAE;EACvBoB,IAAI,CAACC,QAAQ,CAACD,IAAI,CAACE,QAAQ,EAAE,GAAG,CAAC,CAAC;EAClC,OAAOF,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module"}